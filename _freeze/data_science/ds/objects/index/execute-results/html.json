{
  "hash": "ca2adf7f0087d85bf4846c8dd220a83f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: '{{< animate fadeInDown \"Bias in AI: detection and mitigation\"delay=.6s >}}'\nsubtitle: '{{< animate fadeInDown \"Enable users to detect and mitigate bias, using the example of the COMPAS Recidivism Risk Score Data and Analysis Dataset. Users will be equiped with concrete strategies to first detect, and secondly mitigate bias\"delay=.6s >}}'\nauthor:\n  - Jorge Roa\n  - Carlo Gre√ü\n  - Hannah Schweren\ndate: '2023-12-05'\ncategories:\n  - Advanced\n  - Bias in AI\n  - Mitigation\ntoc: true\ndraft: false\ncode-link: true\ncode-copy: true\ntitle-block-banner: true\ncomments: false\nimage: images/dalle.png\ninclude-in-header: meta.html\nformat: html\nfilters:\n  - lightbox\n  - webr\nlightbox:\n  match: auto\n  effect: fade\n  desc-position: left\n  css-class: lightwidth\nwebr:\n  packages:\n    - ggplot2\n    - dplyr\n  show-startup-message: false\n  show-header-message: false\nexecute:\n  freeze: true\n---\n\n<br>\n\n# Introduction\n\nThis notebook offers a detailed guide that includes both code and explanations aimed at enabling users to identify and counteract bias within data, specifically using the COMPAS Recidivism Risk Score Data and Analysis Dataset as a case study. It provides users with practical strategies to first detect and then mitigate bias, laying a foundational approach for handling biases effectively in algorithmic processes. The tutorial is designed as an introductory step towards fostering an understanding of the biases that can infiltrate algorithms and promoting the development of ethical AI practices. This is particularly critical in contexts where algorithmic decisions intersect with policy-making, potentially influencing societal outcomes. Through this guide, users will not only learn to recognize biases but also implement measures to address these biases, thereby enhancing the fairness and integrity of AI systems in public and private sectors.\n\n<br>\n\n# Overview\n\nThe COMPAS dataset, used by an algorithm predicting recidivism risk, has become a key example in the study of algorithmic bias and fairness. It includes demographic and criminal history data. Analyses revealed racial disparities in risk assessments, with the algorithm tending to overestimate recidivism risk for Black defendants and underestimate it for White defendants.\n\nThis tutorial is divided into three parts:\n\n1.- *Introduction to Bias Detection Metrics*: We will introduce different metrics to detect bias, providing a smooth introduction to the topic and helping users gain a better understanding of the issue.\n\n2.- *Replication of Biased Output with a Feed Forward Neural Network*: In this step, we will replicate the biased output using a Feed Forward Neural Network. This hands-on exercise will provide users with practical experience in generating predictions and raise awarness for the biased output.\n\n3.*-Mitigation of Detected Bias*: The grand finale and most important part of our tutorial! Users will learn effective strategies to mitigate the detected bias. This step is crucial for ethical deep learning, and the tutorial aims to equip users with essential skills dealing with biased results.\n\nBy completing this tutorial, users will acquire valuable skills for future data endeavors. It serves as a foundational step to train users and raise awareness of fairness issues in Deep Learning. \n\n<br>\n\n\n## Background and Prerequisites\n\nThis tutorial is designed for users with a basic understanding of Python and Deep Learning. Users should have a foundational understanding of key concepts in machine learning and neural networks. Familiarity with Python is essential. Additionally, a grasp of linear algebra and calculus will be beneficial for understanding the mathematical underpinnings of deep learning algorithms.\n\n- A solid understanding of model training is crucial, as well as knowledge of common machine learning libraries such as   `Keras` and `scikit-learn`. Users should also be aware of the ethical and policy considerations surrounding machine learning applications, particularly in relation to bias and fairness.\n\n- Lastly, a conceptual understanding of how neural networks operate, including layers, activation functions, and backpropagation, will enhance the learning experience of the user. Overall, a basic background in machine learning fundamentals will help users to engage more effectively with our tutorial.\n\n::: {#f49e1cc2 .cell message='false' execution_count=1}\n``` {.python .cell-code}\n!pip install pandas numpy matplotlib\n!pip install Aequitas\n!pip install keras_tuner\n!pip install aif360\n!pip install BlackBoxAuditing\n!pip install tensorflow\n```\n:::\n\n\n::: {#32eb0ac0 .cell message='false' execution_count=2}\n``` {.python .cell-code}\n# Data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"white\", palette=\"muted\", color_codes=True, context=\"talk\")\nfrom IPython import display\n\n# Data manipulation\nimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\n\n# Aequitas library used to audit models for discrimination and bias\nfrom aequitas.group import Group\nfrom aequitas.bias import Bias\nfrom aequitas.fairness import Fairness\nfrom aequitas.plotting import Plot\nimport matplotlib.pyplot as plt\nimport warnings; warnings.simplefilter('ignore')\n\n# Machine and deep learning libraries\nimport tensorflow as tf\nfrom keras.layers import Input, Dense, Dropout\nfrom keras.models import Model\nfrom keras.optimizers import Adam\nimport keras_tuner as kt\nfrom keras import Input, Model\nfrom keras.layers import Dense, Dropout\nfrom keras.optimizers import Adam\nfrom sklearn.utils.class_weight import compute_class_weight\nfrom sklearn.metrics import accuracy_score, roc_auc_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import precision_score, recall_score, f1_score, confusion_matrix\n\n# AI fairness library\nfrom aif360.algorithms.preprocessing import DisparateImpactRemover\nfrom aif360.datasets import StandardDataset as Dataset\nfrom aif360.metrics import BinaryLabelDatasetMetric\nfrom aif360.algorithms.postprocessing.reject_option_classification import RejectOptionClassification\nfrom aif360.algorithms.preprocessing.reweighing import Reweighing\nfrom collections import OrderedDict\nfrom aif360.metrics import ClassificationMetric\n```\n:::\n\n\n# Data Description\n\nIn this tutorial we are working with the COMPAS Recidivism Risk Score Data and Analysis (Source: Pro Publica, https://www.propublica.org/datastore/dataset/compas-recidivism-risk-score-data-and-analysis) This dataset is a classical example for bias in machine learning. We specifically liked using this dataset as an example because it reveils the possible harmfull negative impact on real world decisions, that algorithms can have and the resulting policy responsibility.\n\nThe tabular dataset is used in U.S. court proceedings to evaluate the probability of a defendant reoffending. It is available in csv format for free and contains the following information (Source: https://mlr3fairness.mlr-org.com/reference/compas.html#pre-processing) :\n\n-  (integer) **age** : The age of defendants.\n\n-  (factor) **c_charge_degree** : The charge degree of defendants. F: Felony M: Misdemeanor\n\n- (factor) **race**: The race of defendants.\n\n- (factor) **age_cat**: The age category of defendants.\n\n- (factor) **score_text**: The score category of defendants.\n\n- (factor) **sex**: The sex of defendants.\n\n- (integer) **priors_count**: The prior criminal records of defendants.\n\n- (integer) **days_b_screening_arrest**: The count of days between screening date and (original) arrest date. If they are too far apart, that may - indicate an error. If the value is negative, that indicate the screening date happened before the arrest date.\n\n- (integer) **decile_score**: Indicate the risk of recidivism (Min=1, Max=10)\n\n- (integer) **is_recid**: Binary variable indicate whether defendant is rearrested at any time.\n\n- (factor) **two_year_recid**: Binary variable indicate whether defendant is rearrested at within two years.\n\n- (numeric) **length_of_stay**: The count of days stay in jail.\n\nIn the course of the tutorial, we'll also work with a version of the COMPAS data, that was processed to work well with the aequitas package - this version of the dataset can be found in this Github repository: https://github.com/dssg/aequitas/tree/master/examples/data. Here, only a subset of the variables is considered, but it includes all important variables for demonstrating the package's benefits. It includes:\n\n- (integer) **entity_id**: ID variable\n\n- (integer) **score**: Risk score of defendants, binary\n\n- (factor) **label_value**: Binary variable indicate whether defendant is rearrested\n\n- (factor) *race*: The race of defendants.\n\n- (factor) **sex**: The sex of defendants\n\n- (factor) **age_cat**: The age category of defendants\n\n<br>\n\n# Part 1: Data Exploration and Bias Detection\n\n**Note that the first part of this tutorial is largely based on the documentation of the aequitas-library (https://dssg.github.io/aequitas/examples/compas_demo.html?highlight=xtab). Since the COMPAS data is a widely-known and commonly used data set for showing issues with biased data, the authors used it for demonstrating the library's core functions. Instead of linking the documentation, we decided to include the most important features of the library in the first part of our tutorial, partially adapting some code. More, we adjusted some codes in order to show the metrics that were most important to us for demonstrating bias in the compas data.**\n\n<br>\n\nFor a first overview of the data, we load it directly from GitHub. Note that we use a version of the Compas data here that is explicitly well-suited for the Aequitas library, with a restricted number of columns and slightly deviating variable names. From printing the first 5 rows, we can retrieve that an ID variable, a (binary) risk score, a (binary) recidivism indicator, and three demographic variables (race, sex, age) are included.\n\n\n\n## 1.1 Data Download\n\n::: {#ffb2ae2d .cell execution_count=4}\n``` {.python .cell-code}\n# Load the data\n\ndf_compas_aeq = pd.read_csv(\"https://raw.githubusercontent.com/dssg/aequitas/master/examples/data/compas_for_aequitas.csv\")\ndf_compas_aeq.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>entity_id</th>\n      <th>score</th>\n      <th>label_value</th>\n      <th>race</th>\n      <th>sex</th>\n      <th>age_cat</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>Other</td>\n      <td>Male</td>\n      <td>Greater than 45</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>African-American</td>\n      <td>Male</td>\n      <td>25 - 45</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>African-American</td>\n      <td>Male</td>\n      <td>Less than 25</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>African-American</td>\n      <td>Male</td>\n      <td>Less than 25</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>6</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>Other</td>\n      <td>Male</td>\n      <td>25 - 45</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n## Exploratory Data Visualization\n\n### Distribution of Defendants by Demographics (Race, Age, Sex) and Risk Scores\n\n<br>\n\nAs a first step, we are exploring the distribution of our defendant data with regards to demographic characteristics and the calculated risk scores. As we can see, African-Americans, Caucasians, males, and defendants aged 25-45 are the subgroups that are highly represented in the data. Additionally, we can already see from the plots that African-Americans and defendants aged under 25 are the only subgroups where the majority has been assigned a high risk score.\n\n::: {#9ff70afc .cell execution_count=5}\n``` {.python .cell-code code-fold=\"true\"}\nReds_palette = sns.diverging_palette(204, 0, n=2)\n\n# Create a figure with 3 subplots (3 rows, 1 column)\nfig, axes = plt.subplots(3, 1, figsize=(8, 16))\n\n# race\nby_race = sns.countplot(\n    ax=axes[0],\n    x=\"race\",\n    hue=\"score\",\n    data=df_compas_aeq,\n    palette=Reds_palette\n)\n\naxes[0].set_title(\"Distribution of Defendants by Race and Risk Score (Decile)\")\naxes[0].set_xlabel(\"Race\")\naxes[0].set_ylabel(\"Count\")\naxes[0].legend(loc='upper right', title='Risk Score Decile')\naxes[0].grid(True, linestyle='--', linewidth=0.5)\naxes[0].tick_params(axis='x', rotation=45)\n\n# sex\nby_sex = sns.countplot(\n    ax=axes[1],\n    x=\"sex\",\n    hue=\"score\",\n    data=df_compas_aeq,\n    palette=Reds_palette\n)\n\n# Add title and labels\naxes[1].set_title(\"Distribution of Defendants by Sex and Risk Score (Decile)\")\naxes[1].set_xlabel(\"Sex\")\naxes[1].set_ylabel(\"Count\")\n\n# sex\naxes[1].legend(loc='upper right', title='Risk Score')\naxes[1].grid(True, linestyle='--', linewidth=0.5)\naxes[1].tick_params(axis='x', rotation=45)\n\n# Create countplot for age\nby_age = sns.countplot(\n    ax=axes[2],\n    x=\"age_cat\",\n    hue=\"score\",\n    data=df_compas_aeq,\n    palette=Reds_palette\n)\n\naxes[2].set_title(\"Distribution of Defendants by Age and Risk Score (Decile)\")\naxes[2].set_xlabel(\"Age Category\")\naxes[2].set_ylabel(\"Count\")\n\naxes[2].legend(loc='upper right', title='Risk Score')\n\naxes[2].grid(True, linestyle='--', linewidth=0.5)\n\naxes[2].tick_params(axis='x', rotation=45)\n\nplt.tight_layout()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=739 height=1504}\n:::\n:::\n\n\n<br>\n\n## Distribution of Defendants by Demographics and Recidivism\n\nNext, we are looking at the same demographic subgroups and whether the defendants actually committed crime again. We can already see, that there seems to be a mismatch between the assigned risk scores and the recidivism patterns.\n\n::: {#baaf731a .cell execution_count=6}\n``` {.python .cell-code code-fold=\"true\"}\ncoolwarm_two_colors = sns.color_palette(\"coolwarm\", n_colors=2)\ncoolwarm_palette = sns.color_palette(\"coolwarm\", as_cmap=True)\n\n\n# Create a figure with 3 subplots (3 rows, 1 column)\nfig, axes = plt.subplots(3, 1, figsize=(8, 16))\n\n# Create countplot for race\nlabel_by_race = sns.countplot(\n    ax=axes[0],\n    x=\"race\",\n    hue=\"label_value\",\n    data=df_compas_aeq,\n    palette=coolwarm_two_colors\n)\n\n# Add title and labels for race\naxes[0].set_title(\"Levels of recidivism by Race\")\naxes[0].set_xlabel(\"Race\")\naxes[0].set_ylabel(\"Count\")\naxes[0].grid(True, linestyle='--', linewidth=0.5)\naxes[0].legend(loc='upper right', title='Recidivism')\naxes[0].tick_params(axis='x', rotation=45)\n\n# Create countplot for sex\nlabel_by_sex = sns.countplot(\n    ax=axes[1],\n    x=\"sex\",\n    hue=\"label_value\",\n    data=df_compas_aeq,\n    palette=coolwarm_two_colors\n)\n\n# Add title and labels for sex\naxes[1].set_title(\"Levels of recidivism by Sex\")\naxes[1].set_xlabel(\"Sex\")\naxes[1].set_ylabel(\"Count\")\naxes[1].grid(True, linestyle='--', linewidth=0.5)\naxes[1].legend(loc='upper right', title='Recidivism')\naxes[1].tick_params(axis='x', rotation=45)\n\n# Create countplot for age category\nlabel_by_age = sns.countplot(\n    ax=axes[2],\n    x=\"age_cat\",\n    hue=\"label_value\",\n    data=df_compas_aeq,\n    palette=coolwarm_two_colors\n)\n\n# Add title and labels for age category\naxes[2].set_title(\"Levels of recidivism by Age Category\")\naxes[2].set_xlabel(\"Age Category\")\naxes[2].set_ylabel(\"Count\")\naxes[2].grid(True, linestyle='--', linewidth=0.5)\naxes[2].legend(loc='upper right', title='Recidivism')\n\n# Adjust layout\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){width=735 height=1503}\n:::\n:::\n\n\n<br>\n\n## Introducing the Aequitas-Library\n\nAfter eyeballing our data set and noticing that there might be some fairness issues, we can now use the Aequitas library to calculate common metrics that indicate biases in subgroups. More specifically, we are using the library's Group() class that evaluates biases across all demographic subgroups in the dataset. Note here that the library requires the input data to have columns named \"score\" and \"label_value\". These columns are by default used to calculate the bias metrics.\n\nIn order to use Aequitas for your purposes, you should rename the columns that you want to check for potential biases to \"score\" and \"label_value\". Additionally, at least one column needs to include grouping information (in our example, several demographic variables). ID variables as entity_id are by default not treated as grouping variables.\n\nThe following code chunk calculates these metrices for all demographic subgroups using the get_crosstabs function, based on the risk score and the label_value, which indicates the recidivism.\n\n::: {#301ab5ee .cell execution_count=7}\n``` {.python .cell-code code-fold=\"true\"}\ng = Group()\nxtab, _ = g.get_crosstabs(df_compas_aeq)\nxtab\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>model_id</th>\n      <th>score_threshold</th>\n      <th>k</th>\n      <th>attribute_name</th>\n      <th>attribute_value</th>\n      <th>accuracy</th>\n      <th>tpr</th>\n      <th>tnr</th>\n      <th>for</th>\n      <th>fdr</th>\n      <th>...</th>\n      <th>pprev</th>\n      <th>fp</th>\n      <th>fn</th>\n      <th>tn</th>\n      <th>tp</th>\n      <th>group_label_pos</th>\n      <th>group_label_neg</th>\n      <th>group_size</th>\n      <th>total_entities</th>\n      <th>prev</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>binary 0/1</td>\n      <td>3317</td>\n      <td>race</td>\n      <td>African-American</td>\n      <td>0.638258</td>\n      <td>0.720147</td>\n      <td>0.551532</td>\n      <td>0.349540</td>\n      <td>0.370285</td>\n      <td>...</td>\n      <td>0.588203</td>\n      <td>805</td>\n      <td>532</td>\n      <td>990</td>\n      <td>1369</td>\n      <td>1901</td>\n      <td>1795</td>\n      <td>3696</td>\n      <td>7214</td>\n      <td>0.514340</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>binary 0/1</td>\n      <td>3317</td>\n      <td>race</td>\n      <td>Asian</td>\n      <td>0.843750</td>\n      <td>0.666667</td>\n      <td>0.913043</td>\n      <td>0.125000</td>\n      <td>0.250000</td>\n      <td>...</td>\n      <td>0.250000</td>\n      <td>2</td>\n      <td>3</td>\n      <td>21</td>\n      <td>6</td>\n      <td>9</td>\n      <td>23</td>\n      <td>32</td>\n      <td>7214</td>\n      <td>0.281250</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>binary 0/1</td>\n      <td>3317</td>\n      <td>race</td>\n      <td>Caucasian</td>\n      <td>0.669927</td>\n      <td>0.522774</td>\n      <td>0.765457</td>\n      <td>0.288125</td>\n      <td>0.408665</td>\n      <td>...</td>\n      <td>0.348003</td>\n      <td>349</td>\n      <td>461</td>\n      <td>1139</td>\n      <td>505</td>\n      <td>966</td>\n      <td>1488</td>\n      <td>2454</td>\n      <td>7214</td>\n      <td>0.393643</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>binary 0/1</td>\n      <td>3317</td>\n      <td>race</td>\n      <td>Hispanic</td>\n      <td>0.660911</td>\n      <td>0.443966</td>\n      <td>0.785185</td>\n      <td>0.288591</td>\n      <td>0.457895</td>\n      <td>...</td>\n      <td>0.298273</td>\n      <td>87</td>\n      <td>129</td>\n      <td>318</td>\n      <td>103</td>\n      <td>232</td>\n      <td>405</td>\n      <td>637</td>\n      <td>7214</td>\n      <td>0.364207</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>binary 0/1</td>\n      <td>3317</td>\n      <td>race</td>\n      <td>Native American</td>\n      <td>0.777778</td>\n      <td>0.900000</td>\n      <td>0.625000</td>\n      <td>0.166667</td>\n      <td>0.250000</td>\n      <td>...</td>\n      <td>0.666667</td>\n      <td>3</td>\n      <td>1</td>\n      <td>5</td>\n      <td>9</td>\n      <td>10</td>\n      <td>8</td>\n      <td>18</td>\n      <td>7214</td>\n      <td>0.555556</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0</td>\n      <td>binary 0/1</td>\n      <td>3317</td>\n      <td>race</td>\n      <td>Other</td>\n      <td>0.665782</td>\n      <td>0.323308</td>\n      <td>0.852459</td>\n      <td>0.302013</td>\n      <td>0.455696</td>\n      <td>...</td>\n      <td>0.209549</td>\n      <td>36</td>\n      <td>90</td>\n      <td>208</td>\n      <td>43</td>\n      <td>133</td>\n      <td>244</td>\n      <td>377</td>\n      <td>7214</td>\n      <td>0.352785</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0</td>\n      <td>binary 0/1</td>\n      <td>3317</td>\n      <td>sex</td>\n      <td>Female</td>\n      <td>0.653763</td>\n      <td>0.608434</td>\n      <td>0.678930</td>\n      <td>0.242537</td>\n      <td>0.487310</td>\n      <td>...</td>\n      <td>0.423656</td>\n      <td>288</td>\n      <td>195</td>\n      <td>609</td>\n      <td>303</td>\n      <td>498</td>\n      <td>897</td>\n      <td>1395</td>\n      <td>7214</td>\n      <td>0.356989</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0</td>\n      <td>binary 0/1</td>\n      <td>3317</td>\n      <td>sex</td>\n      <td>Male</td>\n      <td>0.653721</td>\n      <td>0.629132</td>\n      <td>0.675799</td>\n      <td>0.330100</td>\n      <td>0.364637</td>\n      <td>...</td>\n      <td>0.468465</td>\n      <td>994</td>\n      <td>1021</td>\n      <td>2072</td>\n      <td>1732</td>\n      <td>2753</td>\n      <td>3066</td>\n      <td>5819</td>\n      <td>7214</td>\n      <td>0.473105</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0</td>\n      <td>binary 0/1</td>\n      <td>3317</td>\n      <td>age_cat</td>\n      <td>25 - 45</td>\n      <td>0.647846</td>\n      <td>0.626257</td>\n      <td>0.666216</td>\n      <td>0.323112</td>\n      <td>0.385135</td>\n      <td>...</td>\n      <td>0.468240</td>\n      <td>741</td>\n      <td>706</td>\n      <td>1479</td>\n      <td>1183</td>\n      <td>1889</td>\n      <td>2220</td>\n      <td>4109</td>\n      <td>7214</td>\n      <td>0.459723</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>0</td>\n      <td>binary 0/1</td>\n      <td>3317</td>\n      <td>age_cat</td>\n      <td>Greater than 45</td>\n      <td>0.704315</td>\n      <td>0.427711</td>\n      <td>0.832096</td>\n      <td>0.241117</td>\n      <td>0.459391</td>\n      <td>...</td>\n      <td>0.250000</td>\n      <td>181</td>\n      <td>285</td>\n      <td>897</td>\n      <td>213</td>\n      <td>498</td>\n      <td>1078</td>\n      <td>1576</td>\n      <td>7214</td>\n      <td>0.315990</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>0</td>\n      <td>binary 0/1</td>\n      <td>3317</td>\n      <td>age_cat</td>\n      <td>Less than 25</td>\n      <td>0.617397</td>\n      <td>0.739583</td>\n      <td>0.458647</td>\n      <td>0.424528</td>\n      <td>0.360360</td>\n      <td>...</td>\n      <td>0.653368</td>\n      <td>360</td>\n      <td>225</td>\n      <td>305</td>\n      <td>639</td>\n      <td>864</td>\n      <td>665</td>\n      <td>1529</td>\n      <td>7214</td>\n      <td>0.565075</td>\n    </tr>\n  </tbody>\n</table>\n<p>11 rows √ó 27 columns</p>\n</div>\n```\n:::\n:::\n\n\n<br>\n\nAdditionally, we can use list_absolute_metrics() for an improved overview grouped by the demographics and with rounded values for the metrics.\n\n<br>\n\n::: {#d77c8935 .cell execution_count=8}\n``` {.python .cell-code code-fold=\"true\"}\nabsolute_metrics = g.list_absolute_metrics(xtab)\nxtab[['attribute_name', 'attribute_value'] + absolute_metrics].round(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>attribute_name</th>\n      <th>attribute_value</th>\n      <th>accuracy</th>\n      <th>tpr</th>\n      <th>tnr</th>\n      <th>for</th>\n      <th>fdr</th>\n      <th>fpr</th>\n      <th>fnr</th>\n      <th>npv</th>\n      <th>precision</th>\n      <th>ppr</th>\n      <th>pprev</th>\n      <th>prev</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>race</td>\n      <td>African-American</td>\n      <td>0.64</td>\n      <td>0.72</td>\n      <td>0.55</td>\n      <td>0.35</td>\n      <td>0.37</td>\n      <td>0.45</td>\n      <td>0.28</td>\n      <td>0.65</td>\n      <td>0.63</td>\n      <td>0.66</td>\n      <td>0.59</td>\n      <td>0.51</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>race</td>\n      <td>Asian</td>\n      <td>0.84</td>\n      <td>0.67</td>\n      <td>0.91</td>\n      <td>0.12</td>\n      <td>0.25</td>\n      <td>0.09</td>\n      <td>0.33</td>\n      <td>0.88</td>\n      <td>0.75</td>\n      <td>0.00</td>\n      <td>0.25</td>\n      <td>0.28</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>race</td>\n      <td>Caucasian</td>\n      <td>0.67</td>\n      <td>0.52</td>\n      <td>0.77</td>\n      <td>0.29</td>\n      <td>0.41</td>\n      <td>0.23</td>\n      <td>0.48</td>\n      <td>0.71</td>\n      <td>0.59</td>\n      <td>0.26</td>\n      <td>0.35</td>\n      <td>0.39</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>race</td>\n      <td>Hispanic</td>\n      <td>0.66</td>\n      <td>0.44</td>\n      <td>0.79</td>\n      <td>0.29</td>\n      <td>0.46</td>\n      <td>0.21</td>\n      <td>0.56</td>\n      <td>0.71</td>\n      <td>0.54</td>\n      <td>0.06</td>\n      <td>0.30</td>\n      <td>0.36</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>race</td>\n      <td>Native American</td>\n      <td>0.78</td>\n      <td>0.90</td>\n      <td>0.62</td>\n      <td>0.17</td>\n      <td>0.25</td>\n      <td>0.38</td>\n      <td>0.10</td>\n      <td>0.83</td>\n      <td>0.75</td>\n      <td>0.00</td>\n      <td>0.67</td>\n      <td>0.56</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>race</td>\n      <td>Other</td>\n      <td>0.67</td>\n      <td>0.32</td>\n      <td>0.85</td>\n      <td>0.30</td>\n      <td>0.46</td>\n      <td>0.15</td>\n      <td>0.68</td>\n      <td>0.70</td>\n      <td>0.54</td>\n      <td>0.02</td>\n      <td>0.21</td>\n      <td>0.35</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>sex</td>\n      <td>Female</td>\n      <td>0.65</td>\n      <td>0.61</td>\n      <td>0.68</td>\n      <td>0.24</td>\n      <td>0.49</td>\n      <td>0.32</td>\n      <td>0.39</td>\n      <td>0.76</td>\n      <td>0.51</td>\n      <td>0.18</td>\n      <td>0.42</td>\n      <td>0.36</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>sex</td>\n      <td>Male</td>\n      <td>0.65</td>\n      <td>0.63</td>\n      <td>0.68</td>\n      <td>0.33</td>\n      <td>0.36</td>\n      <td>0.32</td>\n      <td>0.37</td>\n      <td>0.67</td>\n      <td>0.64</td>\n      <td>0.82</td>\n      <td>0.47</td>\n      <td>0.47</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>age_cat</td>\n      <td>25 - 45</td>\n      <td>0.65</td>\n      <td>0.63</td>\n      <td>0.67</td>\n      <td>0.32</td>\n      <td>0.39</td>\n      <td>0.33</td>\n      <td>0.37</td>\n      <td>0.68</td>\n      <td>0.61</td>\n      <td>0.58</td>\n      <td>0.47</td>\n      <td>0.46</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>age_cat</td>\n      <td>Greater than 45</td>\n      <td>0.70</td>\n      <td>0.43</td>\n      <td>0.83</td>\n      <td>0.24</td>\n      <td>0.46</td>\n      <td>0.17</td>\n      <td>0.57</td>\n      <td>0.76</td>\n      <td>0.54</td>\n      <td>0.12</td>\n      <td>0.25</td>\n      <td>0.32</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>age_cat</td>\n      <td>Less than 25</td>\n      <td>0.62</td>\n      <td>0.74</td>\n      <td>0.46</td>\n      <td>0.42</td>\n      <td>0.36</td>\n      <td>0.54</td>\n      <td>0.26</td>\n      <td>0.58</td>\n      <td>0.64</td>\n      <td>0.30</td>\n      <td>0.65</td>\n      <td>0.57</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\nNext, we can use the information on the metrics that have been calculated by the previous chunk to plot the present biases. For that purpose, the `Plot()` class is used and stored in a variable. Afterwards, this variable can be used to plot the metrics of interest. The next code chunk exemplarily plots the **false positive rate** for all subgroups. In the context of our data, false positive cases are present when defendants are classified high risk although they did not recidivate. As we can see from the plot below, these cases are especially present amoung younger as well as among African- and Native Americans.\n\nAdditionally, the colors by default indicate how many respondents are included in the respective subgroup. The exact number can also be retrieved from the bar labels. Referring to the group sizes, you can see that the two races with they highest FPR are of significantly different size: While there are only 18 Native Americans included in our data, a total of nearly 3,700 African-American defendants are present.  \n\n::: {#b2ae0141 .cell execution_count=9}\n``` {.python .cell-code code-fold=\"true\"}\naqp = Plot()\nfpr = aqp.plot_group_metric(xtab, 'fpr')\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-10-output-1.png){width=862 height=481}\n:::\n:::\n\n\n<br>\n\nFor better readability, and when only interested in the rates rather then the absolute numbers, we can switch the axes and rotate the x-axis labels:\n\n<br>\n\n::: {#2d79ad3d .cell execution_count=10}\n``` {.python .cell-code code-fold=\"true\"}\nxtab_df = xtab[['attribute_name', 'attribute_value'] + absolute_metrics].round(2).set_index(['attribute_name', 'attribute_value'])\nxtab_df = xtab_df.reset_index()\n\n# Create a figure for the plot\nplt.figure(figsize=(9, 6))\n\n# Create a bar plot for FPR\nax = sns.barplot(x='attribute_value', y='fpr', hue='attribute_name', data=xtab_df, palette='coolwarm', dodge=True)\nax.set_xticklabels(ax.get_xticklabels(), rotation=60, ha='right')\n\n\n# Add title and labels\nplt.title('False Positive Rate (FPR) by Attribute')\nplt.xlabel('Attribute Value')\nplt.ylabel('FPR')\n\n# Rotate x-axis labels for better readability\nplt.xticks(rotation=60)\n\n# Show the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-1.png){width=764 height=689}\n:::\n:::\n\n\n<br>\n\n\nBesides the FPR, the Aequitas package calculated several further helpful metrices that illustrate biases. In the following code chunk, we present four metrices in total:\n\n* The Predicted Positive Rate (PPR): Proportion of positively predicted defendants\n\n* Predictive Prevalence (PPrev): Positive predicition at higher prevalence in relation to group size\n\n* False Negative Rate: Negative risk predictions, positive score\n\n* False Positive Rate: Positive risk predicition, negative score\n\nWe can see that African-Americans and males are largely predicted as having a high-risk score (PPR), which also holds true when considering group size (PPrev), although here, also younger defendants are highly represented. We already discussed FPR, showing that African-Americans are often misclassified as high risk. Looking at the FNR, we can see that African-Americans rather rarely are misclassified as low-risk, while this seems to be especially true with older defendants.\n\n::: {#bfdd69c2 .cell execution_count=11}\n``` {.python .cell-code code-fold=\"true\"}\n# Plot\nfig, axes = plt.subplots(4, 1, figsize=(8, 30))  # 4 rows, 1 column\npalette = sns.color_palette(\"ocean_r\", n_colors=3)\n\n# PPR Plot in the first row (0)\nsns.barplot(x='attribute_value', y='ppr', hue='attribute_name', data=xtab_df, palette=palette, ax=axes[0])\naxes[0].set_title('Positive Predictive Rate (PPR) by Attribute')\naxes[0].set_xlabel('Attribute Value')\naxes[0].set_ylabel('PPR')\naxes[0].tick_params(axis='x', rotation=90)\naxes[0].legend(loc='upper right', title='Category')\n\n# PPrev Plot in the second row (1)\nsns.barplot(x='attribute_value', y='pprev', hue='attribute_name', data=xtab_df, palette=palette, ax=axes[1])\naxes[1].set_title('Predictive Prevalence (PPrev) by Attribute')\naxes[1].set_xlabel('Attribute Value')\naxes[1].set_ylabel('PPrev')\naxes[1].tick_params(axis='x', rotation=90)\naxes[1].legend(loc='upper center', title='Category')\n\n# FNR Plot in the third row (2)\nsns.barplot(x='attribute_value', y='fnr', hue='attribute_name', data=xtab_df, palette=palette, ax=axes[2])\naxes[2].set_title('False Negative Rate (FNR) by Attribute')\naxes[2].set_xlabel('Attribute Value')\naxes[2].set_ylabel('FNR')\naxes[2].tick_params(axis='x', rotation=90)\naxes[2].legend(loc='upper left', title='Category')\n\n# FPR Plot in the fourth row (3)\nsns.barplot(x='attribute_value', y='fpr', hue='attribute_name', data=xtab_df, palette=palette, ax=axes[3])\naxes[3].set_title('False Positive Rate (FPR) by Attribute')\naxes[3].set_xlabel('Attribute Value')\naxes[3].set_ylabel('FPR')\naxes[3].tick_params(axis='x', rotation=90)\naxes[3].legend(loc='upper center', title='Category')\n\n# Adjust the layout\nplt.tight_layout()\n\n# Show the combined plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-12-output-1.png){width=735 height=2847}\n:::\n:::\n\n\n<br>\n\n## Calculating the bias using disparity\n\nLastly, the Aequitas package lets us compare subgroups by calculating disparaties as a ratio of the desired metric.\n\nFor example, the disparity of the false positive ratio for black and white defendants can be calculated like this:\n\n$\\text{Disparity}_{FPR} = \\frac{FPR{\\text{black}}}{FPR{\\text{white}}}$\n\nTo easily calculate the disparity values for all metrices, we use the `Bias()` class of the Aquitas package and calculate a confusion matrix. Note that for each subgroup, you will need to assign a reference category. Here, we chose to compare all included subgroups to Caucasians, males, and defendants aged 25-45.\n\n::: {#19e4568c .cell execution_count=12}\n``` {.python .cell-code code-fold=\"true\"}\nb = Bias()\nbdf = b.get_disparity_predefined_groups(xtab, original_df=df_compas_aeq, ref_groups_dict={'race':'Caucasian', 'sex':'Male', 'age_cat':'25 - 45'}, alpha=0.05, mask_significance=True)\nbdf.style\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<style type=\"text/css\">\n</style>\n<table id=\"T_a6577\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_a6577_level0_col0\" class=\"col_heading level0 col0\" >model_id</th>\n      <th id=\"T_a6577_level0_col1\" class=\"col_heading level0 col1\" >score_threshold</th>\n      <th id=\"T_a6577_level0_col2\" class=\"col_heading level0 col2\" >k</th>\n      <th id=\"T_a6577_level0_col3\" class=\"col_heading level0 col3\" >attribute_name</th>\n      <th id=\"T_a6577_level0_col4\" class=\"col_heading level0 col4\" >attribute_value</th>\n      <th id=\"T_a6577_level0_col5\" class=\"col_heading level0 col5\" >accuracy</th>\n      <th id=\"T_a6577_level0_col6\" class=\"col_heading level0 col6\" >tpr</th>\n      <th id=\"T_a6577_level0_col7\" class=\"col_heading level0 col7\" >tnr</th>\n      <th id=\"T_a6577_level0_col8\" class=\"col_heading level0 col8\" >for</th>\n      <th id=\"T_a6577_level0_col9\" class=\"col_heading level0 col9\" >fdr</th>\n      <th id=\"T_a6577_level0_col10\" class=\"col_heading level0 col10\" >fpr</th>\n      <th id=\"T_a6577_level0_col11\" class=\"col_heading level0 col11\" >fnr</th>\n      <th id=\"T_a6577_level0_col12\" class=\"col_heading level0 col12\" >npv</th>\n      <th id=\"T_a6577_level0_col13\" class=\"col_heading level0 col13\" >precision</th>\n      <th id=\"T_a6577_level0_col14\" class=\"col_heading level0 col14\" >pp</th>\n      <th id=\"T_a6577_level0_col15\" class=\"col_heading level0 col15\" >pn</th>\n      <th id=\"T_a6577_level0_col16\" class=\"col_heading level0 col16\" >ppr</th>\n      <th id=\"T_a6577_level0_col17\" class=\"col_heading level0 col17\" >pprev</th>\n      <th id=\"T_a6577_level0_col18\" class=\"col_heading level0 col18\" >fp</th>\n      <th id=\"T_a6577_level0_col19\" class=\"col_heading level0 col19\" >fn</th>\n      <th id=\"T_a6577_level0_col20\" class=\"col_heading level0 col20\" >tn</th>\n      <th id=\"T_a6577_level0_col21\" class=\"col_heading level0 col21\" >tp</th>\n      <th id=\"T_a6577_level0_col22\" class=\"col_heading level0 col22\" >group_label_pos</th>\n      <th id=\"T_a6577_level0_col23\" class=\"col_heading level0 col23\" >group_label_neg</th>\n      <th id=\"T_a6577_level0_col24\" class=\"col_heading level0 col24\" >group_size</th>\n      <th id=\"T_a6577_level0_col25\" class=\"col_heading level0 col25\" >total_entities</th>\n      <th id=\"T_a6577_level0_col26\" class=\"col_heading level0 col26\" >prev</th>\n      <th id=\"T_a6577_level0_col27\" class=\"col_heading level0 col27\" >ppr_disparity</th>\n      <th id=\"T_a6577_level0_col28\" class=\"col_heading level0 col28\" >pprev_disparity</th>\n      <th id=\"T_a6577_level0_col29\" class=\"col_heading level0 col29\" >precision_disparity</th>\n      <th id=\"T_a6577_level0_col30\" class=\"col_heading level0 col30\" >fdr_disparity</th>\n      <th id=\"T_a6577_level0_col31\" class=\"col_heading level0 col31\" >for_disparity</th>\n      <th id=\"T_a6577_level0_col32\" class=\"col_heading level0 col32\" >fpr_disparity</th>\n      <th id=\"T_a6577_level0_col33\" class=\"col_heading level0 col33\" >fnr_disparity</th>\n      <th id=\"T_a6577_level0_col34\" class=\"col_heading level0 col34\" >tpr_disparity</th>\n      <th id=\"T_a6577_level0_col35\" class=\"col_heading level0 col35\" >tnr_disparity</th>\n      <th id=\"T_a6577_level0_col36\" class=\"col_heading level0 col36\" >npv_disparity</th>\n      <th id=\"T_a6577_level0_col37\" class=\"col_heading level0 col37\" >ppr_ref_group_value</th>\n      <th id=\"T_a6577_level0_col38\" class=\"col_heading level0 col38\" >pprev_ref_group_value</th>\n      <th id=\"T_a6577_level0_col39\" class=\"col_heading level0 col39\" >precision_ref_group_value</th>\n      <th id=\"T_a6577_level0_col40\" class=\"col_heading level0 col40\" >fdr_ref_group_value</th>\n      <th id=\"T_a6577_level0_col41\" class=\"col_heading level0 col41\" >for_ref_group_value</th>\n      <th id=\"T_a6577_level0_col42\" class=\"col_heading level0 col42\" >fpr_ref_group_value</th>\n      <th id=\"T_a6577_level0_col43\" class=\"col_heading level0 col43\" >fnr_ref_group_value</th>\n      <th id=\"T_a6577_level0_col44\" class=\"col_heading level0 col44\" >tpr_ref_group_value</th>\n      <th id=\"T_a6577_level0_col45\" class=\"col_heading level0 col45\" >tnr_ref_group_value</th>\n      <th id=\"T_a6577_level0_col46\" class=\"col_heading level0 col46\" >npv_ref_group_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_a6577_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n      <td id=\"T_a6577_row0_col0\" class=\"data row0 col0\" >0</td>\n      <td id=\"T_a6577_row0_col1\" class=\"data row0 col1\" >binary 0/1</td>\n      <td id=\"T_a6577_row0_col2\" class=\"data row0 col2\" >3317</td>\n      <td id=\"T_a6577_row0_col3\" class=\"data row0 col3\" >race</td>\n      <td id=\"T_a6577_row0_col4\" class=\"data row0 col4\" >African-American</td>\n      <td id=\"T_a6577_row0_col5\" class=\"data row0 col5\" >0.638258</td>\n      <td id=\"T_a6577_row0_col6\" class=\"data row0 col6\" >0.720147</td>\n      <td id=\"T_a6577_row0_col7\" class=\"data row0 col7\" >0.551532</td>\n      <td id=\"T_a6577_row0_col8\" class=\"data row0 col8\" >0.349540</td>\n      <td id=\"T_a6577_row0_col9\" class=\"data row0 col9\" >0.370285</td>\n      <td id=\"T_a6577_row0_col10\" class=\"data row0 col10\" >0.448468</td>\n      <td id=\"T_a6577_row0_col11\" class=\"data row0 col11\" >0.279853</td>\n      <td id=\"T_a6577_row0_col12\" class=\"data row0 col12\" >0.650460</td>\n      <td id=\"T_a6577_row0_col13\" class=\"data row0 col13\" >0.629715</td>\n      <td id=\"T_a6577_row0_col14\" class=\"data row0 col14\" >2174</td>\n      <td id=\"T_a6577_row0_col15\" class=\"data row0 col15\" >1522</td>\n      <td id=\"T_a6577_row0_col16\" class=\"data row0 col16\" >0.655412</td>\n      <td id=\"T_a6577_row0_col17\" class=\"data row0 col17\" >0.588203</td>\n      <td id=\"T_a6577_row0_col18\" class=\"data row0 col18\" >805</td>\n      <td id=\"T_a6577_row0_col19\" class=\"data row0 col19\" >532</td>\n      <td id=\"T_a6577_row0_col20\" class=\"data row0 col20\" >990</td>\n      <td id=\"T_a6577_row0_col21\" class=\"data row0 col21\" >1369</td>\n      <td id=\"T_a6577_row0_col22\" class=\"data row0 col22\" >1901</td>\n      <td id=\"T_a6577_row0_col23\" class=\"data row0 col23\" >1795</td>\n      <td id=\"T_a6577_row0_col24\" class=\"data row0 col24\" >3696</td>\n      <td id=\"T_a6577_row0_col25\" class=\"data row0 col25\" >7214</td>\n      <td id=\"T_a6577_row0_col26\" class=\"data row0 col26\" >0.514340</td>\n      <td id=\"T_a6577_row0_col27\" class=\"data row0 col27\" >2.545667</td>\n      <td id=\"T_a6577_row0_col28\" class=\"data row0 col28\" >1.690224</td>\n      <td id=\"T_a6577_row0_col29\" class=\"data row0 col29\" >1.064904</td>\n      <td id=\"T_a6577_row0_col30\" class=\"data row0 col30\" >0.906085</td>\n      <td id=\"T_a6577_row0_col31\" class=\"data row0 col31\" >1.213154</td>\n      <td id=\"T_a6577_row0_col32\" class=\"data row0 col32\" >1.912093</td>\n      <td id=\"T_a6577_row0_col33\" class=\"data row0 col33\" >0.586416</td>\n      <td id=\"T_a6577_row0_col34\" class=\"data row0 col34\" >1.377549</td>\n      <td id=\"T_a6577_row0_col35\" class=\"data row0 col35\" >0.720526</td>\n      <td id=\"T_a6577_row0_col36\" class=\"data row0 col36\" >0.913728</td>\n      <td id=\"T_a6577_row0_col37\" class=\"data row0 col37\" >Caucasian</td>\n      <td id=\"T_a6577_row0_col38\" class=\"data row0 col38\" >Caucasian</td>\n      <td id=\"T_a6577_row0_col39\" class=\"data row0 col39\" >Caucasian</td>\n      <td id=\"T_a6577_row0_col40\" class=\"data row0 col40\" >Caucasian</td>\n      <td id=\"T_a6577_row0_col41\" class=\"data row0 col41\" >Caucasian</td>\n      <td id=\"T_a6577_row0_col42\" class=\"data row0 col42\" >Caucasian</td>\n      <td id=\"T_a6577_row0_col43\" class=\"data row0 col43\" >Caucasian</td>\n      <td id=\"T_a6577_row0_col44\" class=\"data row0 col44\" >Caucasian</td>\n      <td id=\"T_a6577_row0_col45\" class=\"data row0 col45\" >Caucasian</td>\n      <td id=\"T_a6577_row0_col46\" class=\"data row0 col46\" >Caucasian</td>\n    </tr>\n    <tr>\n      <th id=\"T_a6577_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n      <td id=\"T_a6577_row1_col0\" class=\"data row1 col0\" >0</td>\n      <td id=\"T_a6577_row1_col1\" class=\"data row1 col1\" >binary 0/1</td>\n      <td id=\"T_a6577_row1_col2\" class=\"data row1 col2\" >3317</td>\n      <td id=\"T_a6577_row1_col3\" class=\"data row1 col3\" >race</td>\n      <td id=\"T_a6577_row1_col4\" class=\"data row1 col4\" >Asian</td>\n      <td id=\"T_a6577_row1_col5\" class=\"data row1 col5\" >0.843750</td>\n      <td id=\"T_a6577_row1_col6\" class=\"data row1 col6\" >0.666667</td>\n      <td id=\"T_a6577_row1_col7\" class=\"data row1 col7\" >0.913043</td>\n      <td id=\"T_a6577_row1_col8\" class=\"data row1 col8\" >0.125000</td>\n      <td id=\"T_a6577_row1_col9\" class=\"data row1 col9\" >0.250000</td>\n      <td id=\"T_a6577_row1_col10\" class=\"data row1 col10\" >0.086957</td>\n      <td id=\"T_a6577_row1_col11\" class=\"data row1 col11\" >0.333333</td>\n      <td id=\"T_a6577_row1_col12\" class=\"data row1 col12\" >0.875000</td>\n      <td id=\"T_a6577_row1_col13\" class=\"data row1 col13\" >0.750000</td>\n      <td id=\"T_a6577_row1_col14\" class=\"data row1 col14\" >8</td>\n      <td id=\"T_a6577_row1_col15\" class=\"data row1 col15\" >24</td>\n      <td id=\"T_a6577_row1_col16\" class=\"data row1 col16\" >0.002412</td>\n      <td id=\"T_a6577_row1_col17\" class=\"data row1 col17\" >0.250000</td>\n      <td id=\"T_a6577_row1_col18\" class=\"data row1 col18\" >2</td>\n      <td id=\"T_a6577_row1_col19\" class=\"data row1 col19\" >3</td>\n      <td id=\"T_a6577_row1_col20\" class=\"data row1 col20\" >21</td>\n      <td id=\"T_a6577_row1_col21\" class=\"data row1 col21\" >6</td>\n      <td id=\"T_a6577_row1_col22\" class=\"data row1 col22\" >9</td>\n      <td id=\"T_a6577_row1_col23\" class=\"data row1 col23\" >23</td>\n      <td id=\"T_a6577_row1_col24\" class=\"data row1 col24\" >32</td>\n      <td id=\"T_a6577_row1_col25\" class=\"data row1 col25\" >7214</td>\n      <td id=\"T_a6577_row1_col26\" class=\"data row1 col26\" >0.281250</td>\n      <td id=\"T_a6577_row1_col27\" class=\"data row1 col27\" >0.009368</td>\n      <td id=\"T_a6577_row1_col28\" class=\"data row1 col28\" >0.718384</td>\n      <td id=\"T_a6577_row1_col29\" class=\"data row1 col29\" >1.268317</td>\n      <td id=\"T_a6577_row1_col30\" class=\"data row1 col30\" >0.611748</td>\n      <td id=\"T_a6577_row1_col31\" class=\"data row1 col31\" >0.433839</td>\n      <td id=\"T_a6577_row1_col32\" class=\"data row1 col32\" >0.370749</td>\n      <td id=\"T_a6577_row1_col33\" class=\"data row1 col33\" >0.698482</td>\n      <td id=\"T_a6577_row1_col34\" class=\"data row1 col34\" >1.275248</td>\n      <td id=\"T_a6577_row1_col35\" class=\"data row1 col35\" >1.192808</td>\n      <td id=\"T_a6577_row1_col36\" class=\"data row1 col36\" >1.229148</td>\n      <td id=\"T_a6577_row1_col37\" class=\"data row1 col37\" >Caucasian</td>\n      <td id=\"T_a6577_row1_col38\" class=\"data row1 col38\" >Caucasian</td>\n      <td id=\"T_a6577_row1_col39\" class=\"data row1 col39\" >Caucasian</td>\n      <td id=\"T_a6577_row1_col40\" class=\"data row1 col40\" >Caucasian</td>\n      <td id=\"T_a6577_row1_col41\" class=\"data row1 col41\" >Caucasian</td>\n      <td id=\"T_a6577_row1_col42\" class=\"data row1 col42\" >Caucasian</td>\n      <td id=\"T_a6577_row1_col43\" class=\"data row1 col43\" >Caucasian</td>\n      <td id=\"T_a6577_row1_col44\" class=\"data row1 col44\" >Caucasian</td>\n      <td id=\"T_a6577_row1_col45\" class=\"data row1 col45\" >Caucasian</td>\n      <td id=\"T_a6577_row1_col46\" class=\"data row1 col46\" >Caucasian</td>\n    </tr>\n    <tr>\n      <th id=\"T_a6577_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n      <td id=\"T_a6577_row2_col0\" class=\"data row2 col0\" >0</td>\n      <td id=\"T_a6577_row2_col1\" class=\"data row2 col1\" >binary 0/1</td>\n      <td id=\"T_a6577_row2_col2\" class=\"data row2 col2\" >3317</td>\n      <td id=\"T_a6577_row2_col3\" class=\"data row2 col3\" >race</td>\n      <td id=\"T_a6577_row2_col4\" class=\"data row2 col4\" >Caucasian</td>\n      <td id=\"T_a6577_row2_col5\" class=\"data row2 col5\" >0.669927</td>\n      <td id=\"T_a6577_row2_col6\" class=\"data row2 col6\" >0.522774</td>\n      <td id=\"T_a6577_row2_col7\" class=\"data row2 col7\" >0.765457</td>\n      <td id=\"T_a6577_row2_col8\" class=\"data row2 col8\" >0.288125</td>\n      <td id=\"T_a6577_row2_col9\" class=\"data row2 col9\" >0.408665</td>\n      <td id=\"T_a6577_row2_col10\" class=\"data row2 col10\" >0.234543</td>\n      <td id=\"T_a6577_row2_col11\" class=\"data row2 col11\" >0.477226</td>\n      <td id=\"T_a6577_row2_col12\" class=\"data row2 col12\" >0.711875</td>\n      <td id=\"T_a6577_row2_col13\" class=\"data row2 col13\" >0.591335</td>\n      <td id=\"T_a6577_row2_col14\" class=\"data row2 col14\" >854</td>\n      <td id=\"T_a6577_row2_col15\" class=\"data row2 col15\" >1600</td>\n      <td id=\"T_a6577_row2_col16\" class=\"data row2 col16\" >0.257462</td>\n      <td id=\"T_a6577_row2_col17\" class=\"data row2 col17\" >0.348003</td>\n      <td id=\"T_a6577_row2_col18\" class=\"data row2 col18\" >349</td>\n      <td id=\"T_a6577_row2_col19\" class=\"data row2 col19\" >461</td>\n      <td id=\"T_a6577_row2_col20\" class=\"data row2 col20\" >1139</td>\n      <td id=\"T_a6577_row2_col21\" class=\"data row2 col21\" >505</td>\n      <td id=\"T_a6577_row2_col22\" class=\"data row2 col22\" >966</td>\n      <td id=\"T_a6577_row2_col23\" class=\"data row2 col23\" >1488</td>\n      <td id=\"T_a6577_row2_col24\" class=\"data row2 col24\" >2454</td>\n      <td id=\"T_a6577_row2_col25\" class=\"data row2 col25\" >7214</td>\n      <td id=\"T_a6577_row2_col26\" class=\"data row2 col26\" >0.393643</td>\n      <td id=\"T_a6577_row2_col27\" class=\"data row2 col27\" >1.000000</td>\n      <td id=\"T_a6577_row2_col28\" class=\"data row2 col28\" >1.000000</td>\n      <td id=\"T_a6577_row2_col29\" class=\"data row2 col29\" >1.000000</td>\n      <td id=\"T_a6577_row2_col30\" class=\"data row2 col30\" >1.000000</td>\n      <td id=\"T_a6577_row2_col31\" class=\"data row2 col31\" >1.000000</td>\n      <td id=\"T_a6577_row2_col32\" class=\"data row2 col32\" >1.000000</td>\n      <td id=\"T_a6577_row2_col33\" class=\"data row2 col33\" >1.000000</td>\n      <td id=\"T_a6577_row2_col34\" class=\"data row2 col34\" >1.000000</td>\n      <td id=\"T_a6577_row2_col35\" class=\"data row2 col35\" >1.000000</td>\n      <td id=\"T_a6577_row2_col36\" class=\"data row2 col36\" >1.000000</td>\n      <td id=\"T_a6577_row2_col37\" class=\"data row2 col37\" >Caucasian</td>\n      <td id=\"T_a6577_row2_col38\" class=\"data row2 col38\" >Caucasian</td>\n      <td id=\"T_a6577_row2_col39\" class=\"data row2 col39\" >Caucasian</td>\n      <td id=\"T_a6577_row2_col40\" class=\"data row2 col40\" >Caucasian</td>\n      <td id=\"T_a6577_row2_col41\" class=\"data row2 col41\" >Caucasian</td>\n      <td id=\"T_a6577_row2_col42\" class=\"data row2 col42\" >Caucasian</td>\n      <td id=\"T_a6577_row2_col43\" class=\"data row2 col43\" >Caucasian</td>\n      <td id=\"T_a6577_row2_col44\" class=\"data row2 col44\" >Caucasian</td>\n      <td id=\"T_a6577_row2_col45\" class=\"data row2 col45\" >Caucasian</td>\n      <td id=\"T_a6577_row2_col46\" class=\"data row2 col46\" >Caucasian</td>\n    </tr>\n    <tr>\n      <th id=\"T_a6577_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n      <td id=\"T_a6577_row3_col0\" class=\"data row3 col0\" >0</td>\n      <td id=\"T_a6577_row3_col1\" class=\"data row3 col1\" >binary 0/1</td>\n      <td id=\"T_a6577_row3_col2\" class=\"data row3 col2\" >3317</td>\n      <td id=\"T_a6577_row3_col3\" class=\"data row3 col3\" >race</td>\n      <td id=\"T_a6577_row3_col4\" class=\"data row3 col4\" >Hispanic</td>\n      <td id=\"T_a6577_row3_col5\" class=\"data row3 col5\" >0.660911</td>\n      <td id=\"T_a6577_row3_col6\" class=\"data row3 col6\" >0.443966</td>\n      <td id=\"T_a6577_row3_col7\" class=\"data row3 col7\" >0.785185</td>\n      <td id=\"T_a6577_row3_col8\" class=\"data row3 col8\" >0.288591</td>\n      <td id=\"T_a6577_row3_col9\" class=\"data row3 col9\" >0.457895</td>\n      <td id=\"T_a6577_row3_col10\" class=\"data row3 col10\" >0.214815</td>\n      <td id=\"T_a6577_row3_col11\" class=\"data row3 col11\" >0.556034</td>\n      <td id=\"T_a6577_row3_col12\" class=\"data row3 col12\" >0.711409</td>\n      <td id=\"T_a6577_row3_col13\" class=\"data row3 col13\" >0.542105</td>\n      <td id=\"T_a6577_row3_col14\" class=\"data row3 col14\" >190</td>\n      <td id=\"T_a6577_row3_col15\" class=\"data row3 col15\" >447</td>\n      <td id=\"T_a6577_row3_col16\" class=\"data row3 col16\" >0.057281</td>\n      <td id=\"T_a6577_row3_col17\" class=\"data row3 col17\" >0.298273</td>\n      <td id=\"T_a6577_row3_col18\" class=\"data row3 col18\" >87</td>\n      <td id=\"T_a6577_row3_col19\" class=\"data row3 col19\" >129</td>\n      <td id=\"T_a6577_row3_col20\" class=\"data row3 col20\" >318</td>\n      <td id=\"T_a6577_row3_col21\" class=\"data row3 col21\" >103</td>\n      <td id=\"T_a6577_row3_col22\" class=\"data row3 col22\" >232</td>\n      <td id=\"T_a6577_row3_col23\" class=\"data row3 col23\" >405</td>\n      <td id=\"T_a6577_row3_col24\" class=\"data row3 col24\" >637</td>\n      <td id=\"T_a6577_row3_col25\" class=\"data row3 col25\" >7214</td>\n      <td id=\"T_a6577_row3_col26\" class=\"data row3 col26\" >0.364207</td>\n      <td id=\"T_a6577_row3_col27\" class=\"data row3 col27\" >0.222482</td>\n      <td id=\"T_a6577_row3_col28\" class=\"data row3 col28\" >0.857099</td>\n      <td id=\"T_a6577_row3_col29\" class=\"data row3 col29\" >0.916748</td>\n      <td id=\"T_a6577_row3_col30\" class=\"data row3 col30\" >1.120464</td>\n      <td id=\"T_a6577_row3_col31\" class=\"data row3 col31\" >1.001616</td>\n      <td id=\"T_a6577_row3_col32\" class=\"data row3 col32\" >0.915887</td>\n      <td id=\"T_a6577_row3_col33\" class=\"data row3 col33\" >1.165140</td>\n      <td id=\"T_a6577_row3_col34\" class=\"data row3 col34\" >0.849249</td>\n      <td id=\"T_a6577_row3_col35\" class=\"data row3 col35\" >1.025773</td>\n      <td id=\"T_a6577_row3_col36\" class=\"data row3 col36\" >0.999346</td>\n      <td id=\"T_a6577_row3_col37\" class=\"data row3 col37\" >Caucasian</td>\n      <td id=\"T_a6577_row3_col38\" class=\"data row3 col38\" >Caucasian</td>\n      <td id=\"T_a6577_row3_col39\" class=\"data row3 col39\" >Caucasian</td>\n      <td id=\"T_a6577_row3_col40\" class=\"data row3 col40\" >Caucasian</td>\n      <td id=\"T_a6577_row3_col41\" class=\"data row3 col41\" >Caucasian</td>\n      <td id=\"T_a6577_row3_col42\" class=\"data row3 col42\" >Caucasian</td>\n      <td id=\"T_a6577_row3_col43\" class=\"data row3 col43\" >Caucasian</td>\n      <td id=\"T_a6577_row3_col44\" class=\"data row3 col44\" >Caucasian</td>\n      <td id=\"T_a6577_row3_col45\" class=\"data row3 col45\" >Caucasian</td>\n      <td id=\"T_a6577_row3_col46\" class=\"data row3 col46\" >Caucasian</td>\n    </tr>\n    <tr>\n      <th id=\"T_a6577_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n      <td id=\"T_a6577_row4_col0\" class=\"data row4 col0\" >0</td>\n      <td id=\"T_a6577_row4_col1\" class=\"data row4 col1\" >binary 0/1</td>\n      <td id=\"T_a6577_row4_col2\" class=\"data row4 col2\" >3317</td>\n      <td id=\"T_a6577_row4_col3\" class=\"data row4 col3\" >race</td>\n      <td id=\"T_a6577_row4_col4\" class=\"data row4 col4\" >Native American</td>\n      <td id=\"T_a6577_row4_col5\" class=\"data row4 col5\" >0.777778</td>\n      <td id=\"T_a6577_row4_col6\" class=\"data row4 col6\" >0.900000</td>\n      <td id=\"T_a6577_row4_col7\" class=\"data row4 col7\" >0.625000</td>\n      <td id=\"T_a6577_row4_col8\" class=\"data row4 col8\" >0.166667</td>\n      <td id=\"T_a6577_row4_col9\" class=\"data row4 col9\" >0.250000</td>\n      <td id=\"T_a6577_row4_col10\" class=\"data row4 col10\" >0.375000</td>\n      <td id=\"T_a6577_row4_col11\" class=\"data row4 col11\" >0.100000</td>\n      <td id=\"T_a6577_row4_col12\" class=\"data row4 col12\" >0.833333</td>\n      <td id=\"T_a6577_row4_col13\" class=\"data row4 col13\" >0.750000</td>\n      <td id=\"T_a6577_row4_col14\" class=\"data row4 col14\" >12</td>\n      <td id=\"T_a6577_row4_col15\" class=\"data row4 col15\" >6</td>\n      <td id=\"T_a6577_row4_col16\" class=\"data row4 col16\" >0.003618</td>\n      <td id=\"T_a6577_row4_col17\" class=\"data row4 col17\" >0.666667</td>\n      <td id=\"T_a6577_row4_col18\" class=\"data row4 col18\" >3</td>\n      <td id=\"T_a6577_row4_col19\" class=\"data row4 col19\" >1</td>\n      <td id=\"T_a6577_row4_col20\" class=\"data row4 col20\" >5</td>\n      <td id=\"T_a6577_row4_col21\" class=\"data row4 col21\" >9</td>\n      <td id=\"T_a6577_row4_col22\" class=\"data row4 col22\" >10</td>\n      <td id=\"T_a6577_row4_col23\" class=\"data row4 col23\" >8</td>\n      <td id=\"T_a6577_row4_col24\" class=\"data row4 col24\" >18</td>\n      <td id=\"T_a6577_row4_col25\" class=\"data row4 col25\" >7214</td>\n      <td id=\"T_a6577_row4_col26\" class=\"data row4 col26\" >0.555556</td>\n      <td id=\"T_a6577_row4_col27\" class=\"data row4 col27\" >0.014052</td>\n      <td id=\"T_a6577_row4_col28\" class=\"data row4 col28\" >1.915691</td>\n      <td id=\"T_a6577_row4_col29\" class=\"data row4 col29\" >1.268317</td>\n      <td id=\"T_a6577_row4_col30\" class=\"data row4 col30\" >0.611748</td>\n      <td id=\"T_a6577_row4_col31\" class=\"data row4 col31\" >0.578453</td>\n      <td id=\"T_a6577_row4_col32\" class=\"data row4 col32\" >1.598854</td>\n      <td id=\"T_a6577_row4_col33\" class=\"data row4 col33\" >0.209544</td>\n      <td id=\"T_a6577_row4_col34\" class=\"data row4 col34\" >1.721584</td>\n      <td id=\"T_a6577_row4_col35\" class=\"data row4 col35\" >0.816506</td>\n      <td id=\"T_a6577_row4_col36\" class=\"data row4 col36\" >1.170618</td>\n      <td id=\"T_a6577_row4_col37\" class=\"data row4 col37\" >Caucasian</td>\n      <td id=\"T_a6577_row4_col38\" class=\"data row4 col38\" >Caucasian</td>\n      <td id=\"T_a6577_row4_col39\" class=\"data row4 col39\" >Caucasian</td>\n      <td id=\"T_a6577_row4_col40\" class=\"data row4 col40\" >Caucasian</td>\n      <td id=\"T_a6577_row4_col41\" class=\"data row4 col41\" >Caucasian</td>\n      <td id=\"T_a6577_row4_col42\" class=\"data row4 col42\" >Caucasian</td>\n      <td id=\"T_a6577_row4_col43\" class=\"data row4 col43\" >Caucasian</td>\n      <td id=\"T_a6577_row4_col44\" class=\"data row4 col44\" >Caucasian</td>\n      <td id=\"T_a6577_row4_col45\" class=\"data row4 col45\" >Caucasian</td>\n      <td id=\"T_a6577_row4_col46\" class=\"data row4 col46\" >Caucasian</td>\n    </tr>\n    <tr>\n      <th id=\"T_a6577_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n      <td id=\"T_a6577_row5_col0\" class=\"data row5 col0\" >0</td>\n      <td id=\"T_a6577_row5_col1\" class=\"data row5 col1\" >binary 0/1</td>\n      <td id=\"T_a6577_row5_col2\" class=\"data row5 col2\" >3317</td>\n      <td id=\"T_a6577_row5_col3\" class=\"data row5 col3\" >race</td>\n      <td id=\"T_a6577_row5_col4\" class=\"data row5 col4\" >Other</td>\n      <td id=\"T_a6577_row5_col5\" class=\"data row5 col5\" >0.665782</td>\n      <td id=\"T_a6577_row5_col6\" class=\"data row5 col6\" >0.323308</td>\n      <td id=\"T_a6577_row5_col7\" class=\"data row5 col7\" >0.852459</td>\n      <td id=\"T_a6577_row5_col8\" class=\"data row5 col8\" >0.302013</td>\n      <td id=\"T_a6577_row5_col9\" class=\"data row5 col9\" >0.455696</td>\n      <td id=\"T_a6577_row5_col10\" class=\"data row5 col10\" >0.147541</td>\n      <td id=\"T_a6577_row5_col11\" class=\"data row5 col11\" >0.676692</td>\n      <td id=\"T_a6577_row5_col12\" class=\"data row5 col12\" >0.697987</td>\n      <td id=\"T_a6577_row5_col13\" class=\"data row5 col13\" >0.544304</td>\n      <td id=\"T_a6577_row5_col14\" class=\"data row5 col14\" >79</td>\n      <td id=\"T_a6577_row5_col15\" class=\"data row5 col15\" >298</td>\n      <td id=\"T_a6577_row5_col16\" class=\"data row5 col16\" >0.023817</td>\n      <td id=\"T_a6577_row5_col17\" class=\"data row5 col17\" >0.209549</td>\n      <td id=\"T_a6577_row5_col18\" class=\"data row5 col18\" >36</td>\n      <td id=\"T_a6577_row5_col19\" class=\"data row5 col19\" >90</td>\n      <td id=\"T_a6577_row5_col20\" class=\"data row5 col20\" >208</td>\n      <td id=\"T_a6577_row5_col21\" class=\"data row5 col21\" >43</td>\n      <td id=\"T_a6577_row5_col22\" class=\"data row5 col22\" >133</td>\n      <td id=\"T_a6577_row5_col23\" class=\"data row5 col23\" >244</td>\n      <td id=\"T_a6577_row5_col24\" class=\"data row5 col24\" >377</td>\n      <td id=\"T_a6577_row5_col25\" class=\"data row5 col25\" >7214</td>\n      <td id=\"T_a6577_row5_col26\" class=\"data row5 col26\" >0.352785</td>\n      <td id=\"T_a6577_row5_col27\" class=\"data row5 col27\" >0.092506</td>\n      <td id=\"T_a6577_row5_col28\" class=\"data row5 col28\" >0.602147</td>\n      <td id=\"T_a6577_row5_col29\" class=\"data row5 col29\" >0.920466</td>\n      <td id=\"T_a6577_row5_col30\" class=\"data row5 col30\" >1.115085</td>\n      <td id=\"T_a6577_row5_col31\" class=\"data row5 col31\" >1.048203</td>\n      <td id=\"T_a6577_row5_col32\" class=\"data row5 col32\" >0.629057</td>\n      <td id=\"T_a6577_row5_col33\" class=\"data row5 col33\" >1.417970</td>\n      <td id=\"T_a6577_row5_col34\" class=\"data row5 col34\" >0.618447</td>\n      <td id=\"T_a6577_row5_col35\" class=\"data row5 col35\" >1.113660</td>\n      <td id=\"T_a6577_row5_col36\" class=\"data row5 col36\" >0.980490</td>\n      <td id=\"T_a6577_row5_col37\" class=\"data row5 col37\" >Caucasian</td>\n      <td id=\"T_a6577_row5_col38\" class=\"data row5 col38\" >Caucasian</td>\n      <td id=\"T_a6577_row5_col39\" class=\"data row5 col39\" >Caucasian</td>\n      <td id=\"T_a6577_row5_col40\" class=\"data row5 col40\" >Caucasian</td>\n      <td id=\"T_a6577_row5_col41\" class=\"data row5 col41\" >Caucasian</td>\n      <td id=\"T_a6577_row5_col42\" class=\"data row5 col42\" >Caucasian</td>\n      <td id=\"T_a6577_row5_col43\" class=\"data row5 col43\" >Caucasian</td>\n      <td id=\"T_a6577_row5_col44\" class=\"data row5 col44\" >Caucasian</td>\n      <td id=\"T_a6577_row5_col45\" class=\"data row5 col45\" >Caucasian</td>\n      <td id=\"T_a6577_row5_col46\" class=\"data row5 col46\" >Caucasian</td>\n    </tr>\n    <tr>\n      <th id=\"T_a6577_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n      <td id=\"T_a6577_row6_col0\" class=\"data row6 col0\" >0</td>\n      <td id=\"T_a6577_row6_col1\" class=\"data row6 col1\" >binary 0/1</td>\n      <td id=\"T_a6577_row6_col2\" class=\"data row6 col2\" >3317</td>\n      <td id=\"T_a6577_row6_col3\" class=\"data row6 col3\" >sex</td>\n      <td id=\"T_a6577_row6_col4\" class=\"data row6 col4\" >Female</td>\n      <td id=\"T_a6577_row6_col5\" class=\"data row6 col5\" >0.653763</td>\n      <td id=\"T_a6577_row6_col6\" class=\"data row6 col6\" >0.608434</td>\n      <td id=\"T_a6577_row6_col7\" class=\"data row6 col7\" >0.678930</td>\n      <td id=\"T_a6577_row6_col8\" class=\"data row6 col8\" >0.242537</td>\n      <td id=\"T_a6577_row6_col9\" class=\"data row6 col9\" >0.487310</td>\n      <td id=\"T_a6577_row6_col10\" class=\"data row6 col10\" >0.321070</td>\n      <td id=\"T_a6577_row6_col11\" class=\"data row6 col11\" >0.391566</td>\n      <td id=\"T_a6577_row6_col12\" class=\"data row6 col12\" >0.757463</td>\n      <td id=\"T_a6577_row6_col13\" class=\"data row6 col13\" >0.512690</td>\n      <td id=\"T_a6577_row6_col14\" class=\"data row6 col14\" >591</td>\n      <td id=\"T_a6577_row6_col15\" class=\"data row6 col15\" >804</td>\n      <td id=\"T_a6577_row6_col16\" class=\"data row6 col16\" >0.178173</td>\n      <td id=\"T_a6577_row6_col17\" class=\"data row6 col17\" >0.423656</td>\n      <td id=\"T_a6577_row6_col18\" class=\"data row6 col18\" >288</td>\n      <td id=\"T_a6577_row6_col19\" class=\"data row6 col19\" >195</td>\n      <td id=\"T_a6577_row6_col20\" class=\"data row6 col20\" >609</td>\n      <td id=\"T_a6577_row6_col21\" class=\"data row6 col21\" >303</td>\n      <td id=\"T_a6577_row6_col22\" class=\"data row6 col22\" >498</td>\n      <td id=\"T_a6577_row6_col23\" class=\"data row6 col23\" >897</td>\n      <td id=\"T_a6577_row6_col24\" class=\"data row6 col24\" >1395</td>\n      <td id=\"T_a6577_row6_col25\" class=\"data row6 col25\" >7214</td>\n      <td id=\"T_a6577_row6_col26\" class=\"data row6 col26\" >0.356989</td>\n      <td id=\"T_a6577_row6_col27\" class=\"data row6 col27\" >0.216801</td>\n      <td id=\"T_a6577_row6_col28\" class=\"data row6 col28\" >0.904348</td>\n      <td id=\"T_a6577_row6_col29\" class=\"data row6 col29\" >0.806925</td>\n      <td id=\"T_a6577_row6_col30\" class=\"data row6 col30\" >1.336425</td>\n      <td id=\"T_a6577_row6_col31\" class=\"data row6 col31\" >0.734738</td>\n      <td id=\"T_a6577_row6_col32\" class=\"data row6 col32\" >0.990343</td>\n      <td id=\"T_a6577_row6_col33\" class=\"data row6 col33\" >1.055810</td>\n      <td id=\"T_a6577_row6_col34\" class=\"data row6 col34\" >0.967101</td>\n      <td id=\"T_a6577_row6_col35\" class=\"data row6 col35\" >1.004633</td>\n      <td id=\"T_a6577_row6_col36\" class=\"data row6 col36\" >1.130710</td>\n      <td id=\"T_a6577_row6_col37\" class=\"data row6 col37\" >Male</td>\n      <td id=\"T_a6577_row6_col38\" class=\"data row6 col38\" >Male</td>\n      <td id=\"T_a6577_row6_col39\" class=\"data row6 col39\" >Male</td>\n      <td id=\"T_a6577_row6_col40\" class=\"data row6 col40\" >Male</td>\n      <td id=\"T_a6577_row6_col41\" class=\"data row6 col41\" >Male</td>\n      <td id=\"T_a6577_row6_col42\" class=\"data row6 col42\" >Male</td>\n      <td id=\"T_a6577_row6_col43\" class=\"data row6 col43\" >Male</td>\n      <td id=\"T_a6577_row6_col44\" class=\"data row6 col44\" >Male</td>\n      <td id=\"T_a6577_row6_col45\" class=\"data row6 col45\" >Male</td>\n      <td id=\"T_a6577_row6_col46\" class=\"data row6 col46\" >Male</td>\n    </tr>\n    <tr>\n      <th id=\"T_a6577_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n      <td id=\"T_a6577_row7_col0\" class=\"data row7 col0\" >0</td>\n      <td id=\"T_a6577_row7_col1\" class=\"data row7 col1\" >binary 0/1</td>\n      <td id=\"T_a6577_row7_col2\" class=\"data row7 col2\" >3317</td>\n      <td id=\"T_a6577_row7_col3\" class=\"data row7 col3\" >sex</td>\n      <td id=\"T_a6577_row7_col4\" class=\"data row7 col4\" >Male</td>\n      <td id=\"T_a6577_row7_col5\" class=\"data row7 col5\" >0.653721</td>\n      <td id=\"T_a6577_row7_col6\" class=\"data row7 col6\" >0.629132</td>\n      <td id=\"T_a6577_row7_col7\" class=\"data row7 col7\" >0.675799</td>\n      <td id=\"T_a6577_row7_col8\" class=\"data row7 col8\" >0.330100</td>\n      <td id=\"T_a6577_row7_col9\" class=\"data row7 col9\" >0.364637</td>\n      <td id=\"T_a6577_row7_col10\" class=\"data row7 col10\" >0.324201</td>\n      <td id=\"T_a6577_row7_col11\" class=\"data row7 col11\" >0.370868</td>\n      <td id=\"T_a6577_row7_col12\" class=\"data row7 col12\" >0.669900</td>\n      <td id=\"T_a6577_row7_col13\" class=\"data row7 col13\" >0.635363</td>\n      <td id=\"T_a6577_row7_col14\" class=\"data row7 col14\" >2726</td>\n      <td id=\"T_a6577_row7_col15\" class=\"data row7 col15\" >3093</td>\n      <td id=\"T_a6577_row7_col16\" class=\"data row7 col16\" >0.821827</td>\n      <td id=\"T_a6577_row7_col17\" class=\"data row7 col17\" >0.468465</td>\n      <td id=\"T_a6577_row7_col18\" class=\"data row7 col18\" >994</td>\n      <td id=\"T_a6577_row7_col19\" class=\"data row7 col19\" >1021</td>\n      <td id=\"T_a6577_row7_col20\" class=\"data row7 col20\" >2072</td>\n      <td id=\"T_a6577_row7_col21\" class=\"data row7 col21\" >1732</td>\n      <td id=\"T_a6577_row7_col22\" class=\"data row7 col22\" >2753</td>\n      <td id=\"T_a6577_row7_col23\" class=\"data row7 col23\" >3066</td>\n      <td id=\"T_a6577_row7_col24\" class=\"data row7 col24\" >5819</td>\n      <td id=\"T_a6577_row7_col25\" class=\"data row7 col25\" >7214</td>\n      <td id=\"T_a6577_row7_col26\" class=\"data row7 col26\" >0.473105</td>\n      <td id=\"T_a6577_row7_col27\" class=\"data row7 col27\" >1.000000</td>\n      <td id=\"T_a6577_row7_col28\" class=\"data row7 col28\" >1.000000</td>\n      <td id=\"T_a6577_row7_col29\" class=\"data row7 col29\" >1.000000</td>\n      <td id=\"T_a6577_row7_col30\" class=\"data row7 col30\" >1.000000</td>\n      <td id=\"T_a6577_row7_col31\" class=\"data row7 col31\" >1.000000</td>\n      <td id=\"T_a6577_row7_col32\" class=\"data row7 col32\" >1.000000</td>\n      <td id=\"T_a6577_row7_col33\" class=\"data row7 col33\" >1.000000</td>\n      <td id=\"T_a6577_row7_col34\" class=\"data row7 col34\" >1.000000</td>\n      <td id=\"T_a6577_row7_col35\" class=\"data row7 col35\" >1.000000</td>\n      <td id=\"T_a6577_row7_col36\" class=\"data row7 col36\" >1.000000</td>\n      <td id=\"T_a6577_row7_col37\" class=\"data row7 col37\" >Male</td>\n      <td id=\"T_a6577_row7_col38\" class=\"data row7 col38\" >Male</td>\n      <td id=\"T_a6577_row7_col39\" class=\"data row7 col39\" >Male</td>\n      <td id=\"T_a6577_row7_col40\" class=\"data row7 col40\" >Male</td>\n      <td id=\"T_a6577_row7_col41\" class=\"data row7 col41\" >Male</td>\n      <td id=\"T_a6577_row7_col42\" class=\"data row7 col42\" >Male</td>\n      <td id=\"T_a6577_row7_col43\" class=\"data row7 col43\" >Male</td>\n      <td id=\"T_a6577_row7_col44\" class=\"data row7 col44\" >Male</td>\n      <td id=\"T_a6577_row7_col45\" class=\"data row7 col45\" >Male</td>\n      <td id=\"T_a6577_row7_col46\" class=\"data row7 col46\" >Male</td>\n    </tr>\n    <tr>\n      <th id=\"T_a6577_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n      <td id=\"T_a6577_row8_col0\" class=\"data row8 col0\" >0</td>\n      <td id=\"T_a6577_row8_col1\" class=\"data row8 col1\" >binary 0/1</td>\n      <td id=\"T_a6577_row8_col2\" class=\"data row8 col2\" >3317</td>\n      <td id=\"T_a6577_row8_col3\" class=\"data row8 col3\" >age_cat</td>\n      <td id=\"T_a6577_row8_col4\" class=\"data row8 col4\" >25 - 45</td>\n      <td id=\"T_a6577_row8_col5\" class=\"data row8 col5\" >0.647846</td>\n      <td id=\"T_a6577_row8_col6\" class=\"data row8 col6\" >0.626257</td>\n      <td id=\"T_a6577_row8_col7\" class=\"data row8 col7\" >0.666216</td>\n      <td id=\"T_a6577_row8_col8\" class=\"data row8 col8\" >0.323112</td>\n      <td id=\"T_a6577_row8_col9\" class=\"data row8 col9\" >0.385135</td>\n      <td id=\"T_a6577_row8_col10\" class=\"data row8 col10\" >0.333784</td>\n      <td id=\"T_a6577_row8_col11\" class=\"data row8 col11\" >0.373743</td>\n      <td id=\"T_a6577_row8_col12\" class=\"data row8 col12\" >0.676888</td>\n      <td id=\"T_a6577_row8_col13\" class=\"data row8 col13\" >0.614865</td>\n      <td id=\"T_a6577_row8_col14\" class=\"data row8 col14\" >1924</td>\n      <td id=\"T_a6577_row8_col15\" class=\"data row8 col15\" >2185</td>\n      <td id=\"T_a6577_row8_col16\" class=\"data row8 col16\" >0.580042</td>\n      <td id=\"T_a6577_row8_col17\" class=\"data row8 col17\" >0.468240</td>\n      <td id=\"T_a6577_row8_col18\" class=\"data row8 col18\" >741</td>\n      <td id=\"T_a6577_row8_col19\" class=\"data row8 col19\" >706</td>\n      <td id=\"T_a6577_row8_col20\" class=\"data row8 col20\" >1479</td>\n      <td id=\"T_a6577_row8_col21\" class=\"data row8 col21\" >1183</td>\n      <td id=\"T_a6577_row8_col22\" class=\"data row8 col22\" >1889</td>\n      <td id=\"T_a6577_row8_col23\" class=\"data row8 col23\" >2220</td>\n      <td id=\"T_a6577_row8_col24\" class=\"data row8 col24\" >4109</td>\n      <td id=\"T_a6577_row8_col25\" class=\"data row8 col25\" >7214</td>\n      <td id=\"T_a6577_row8_col26\" class=\"data row8 col26\" >0.459723</td>\n      <td id=\"T_a6577_row8_col27\" class=\"data row8 col27\" >1.000000</td>\n      <td id=\"T_a6577_row8_col28\" class=\"data row8 col28\" >1.000000</td>\n      <td id=\"T_a6577_row8_col29\" class=\"data row8 col29\" >1.000000</td>\n      <td id=\"T_a6577_row8_col30\" class=\"data row8 col30\" >1.000000</td>\n      <td id=\"T_a6577_row8_col31\" class=\"data row8 col31\" >1.000000</td>\n      <td id=\"T_a6577_row8_col32\" class=\"data row8 col32\" >1.000000</td>\n      <td id=\"T_a6577_row8_col33\" class=\"data row8 col33\" >1.000000</td>\n      <td id=\"T_a6577_row8_col34\" class=\"data row8 col34\" >1.000000</td>\n      <td id=\"T_a6577_row8_col35\" class=\"data row8 col35\" >1.000000</td>\n      <td id=\"T_a6577_row8_col36\" class=\"data row8 col36\" >1.000000</td>\n      <td id=\"T_a6577_row8_col37\" class=\"data row8 col37\" >25 - 45</td>\n      <td id=\"T_a6577_row8_col38\" class=\"data row8 col38\" >25 - 45</td>\n      <td id=\"T_a6577_row8_col39\" class=\"data row8 col39\" >25 - 45</td>\n      <td id=\"T_a6577_row8_col40\" class=\"data row8 col40\" >25 - 45</td>\n      <td id=\"T_a6577_row8_col41\" class=\"data row8 col41\" >25 - 45</td>\n      <td id=\"T_a6577_row8_col42\" class=\"data row8 col42\" >25 - 45</td>\n      <td id=\"T_a6577_row8_col43\" class=\"data row8 col43\" >25 - 45</td>\n      <td id=\"T_a6577_row8_col44\" class=\"data row8 col44\" >25 - 45</td>\n      <td id=\"T_a6577_row8_col45\" class=\"data row8 col45\" >25 - 45</td>\n      <td id=\"T_a6577_row8_col46\" class=\"data row8 col46\" >25 - 45</td>\n    </tr>\n    <tr>\n      <th id=\"T_a6577_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n      <td id=\"T_a6577_row9_col0\" class=\"data row9 col0\" >0</td>\n      <td id=\"T_a6577_row9_col1\" class=\"data row9 col1\" >binary 0/1</td>\n      <td id=\"T_a6577_row9_col2\" class=\"data row9 col2\" >3317</td>\n      <td id=\"T_a6577_row9_col3\" class=\"data row9 col3\" >age_cat</td>\n      <td id=\"T_a6577_row9_col4\" class=\"data row9 col4\" >Greater than 45</td>\n      <td id=\"T_a6577_row9_col5\" class=\"data row9 col5\" >0.704315</td>\n      <td id=\"T_a6577_row9_col6\" class=\"data row9 col6\" >0.427711</td>\n      <td id=\"T_a6577_row9_col7\" class=\"data row9 col7\" >0.832096</td>\n      <td id=\"T_a6577_row9_col8\" class=\"data row9 col8\" >0.241117</td>\n      <td id=\"T_a6577_row9_col9\" class=\"data row9 col9\" >0.459391</td>\n      <td id=\"T_a6577_row9_col10\" class=\"data row9 col10\" >0.167904</td>\n      <td id=\"T_a6577_row9_col11\" class=\"data row9 col11\" >0.572289</td>\n      <td id=\"T_a6577_row9_col12\" class=\"data row9 col12\" >0.758883</td>\n      <td id=\"T_a6577_row9_col13\" class=\"data row9 col13\" >0.540609</td>\n      <td id=\"T_a6577_row9_col14\" class=\"data row9 col14\" >394</td>\n      <td id=\"T_a6577_row9_col15\" class=\"data row9 col15\" >1182</td>\n      <td id=\"T_a6577_row9_col16\" class=\"data row9 col16\" >0.118782</td>\n      <td id=\"T_a6577_row9_col17\" class=\"data row9 col17\" >0.250000</td>\n      <td id=\"T_a6577_row9_col18\" class=\"data row9 col18\" >181</td>\n      <td id=\"T_a6577_row9_col19\" class=\"data row9 col19\" >285</td>\n      <td id=\"T_a6577_row9_col20\" class=\"data row9 col20\" >897</td>\n      <td id=\"T_a6577_row9_col21\" class=\"data row9 col21\" >213</td>\n      <td id=\"T_a6577_row9_col22\" class=\"data row9 col22\" >498</td>\n      <td id=\"T_a6577_row9_col23\" class=\"data row9 col23\" >1078</td>\n      <td id=\"T_a6577_row9_col24\" class=\"data row9 col24\" >1576</td>\n      <td id=\"T_a6577_row9_col25\" class=\"data row9 col25\" >7214</td>\n      <td id=\"T_a6577_row9_col26\" class=\"data row9 col26\" >0.315990</td>\n      <td id=\"T_a6577_row9_col27\" class=\"data row9 col27\" >0.204782</td>\n      <td id=\"T_a6577_row9_col28\" class=\"data row9 col28\" >0.533914</td>\n      <td id=\"T_a6577_row9_col29\" class=\"data row9 col29\" >0.879232</td>\n      <td id=\"T_a6577_row9_col30\" class=\"data row9 col30\" >1.192804</td>\n      <td id=\"T_a6577_row9_col31\" class=\"data row9 col31\" >0.746232</td>\n      <td id=\"T_a6577_row9_col32\" class=\"data row9 col32\" >0.503031</td>\n      <td id=\"T_a6577_row9_col33\" class=\"data row9 col33\" >1.531238</td>\n      <td id=\"T_a6577_row9_col34\" class=\"data row9 col34\" >0.682963</td>\n      <td id=\"T_a6577_row9_col35\" class=\"data row9 col35\" >1.248989</td>\n      <td id=\"T_a6577_row9_col36\" class=\"data row9 col36\" >1.121136</td>\n      <td id=\"T_a6577_row9_col37\" class=\"data row9 col37\" >25 - 45</td>\n      <td id=\"T_a6577_row9_col38\" class=\"data row9 col38\" >25 - 45</td>\n      <td id=\"T_a6577_row9_col39\" class=\"data row9 col39\" >25 - 45</td>\n      <td id=\"T_a6577_row9_col40\" class=\"data row9 col40\" >25 - 45</td>\n      <td id=\"T_a6577_row9_col41\" class=\"data row9 col41\" >25 - 45</td>\n      <td id=\"T_a6577_row9_col42\" class=\"data row9 col42\" >25 - 45</td>\n      <td id=\"T_a6577_row9_col43\" class=\"data row9 col43\" >25 - 45</td>\n      <td id=\"T_a6577_row9_col44\" class=\"data row9 col44\" >25 - 45</td>\n      <td id=\"T_a6577_row9_col45\" class=\"data row9 col45\" >25 - 45</td>\n      <td id=\"T_a6577_row9_col46\" class=\"data row9 col46\" >25 - 45</td>\n    </tr>\n    <tr>\n      <th id=\"T_a6577_level0_row10\" class=\"row_heading level0 row10\" >10</th>\n      <td id=\"T_a6577_row10_col0\" class=\"data row10 col0\" >0</td>\n      <td id=\"T_a6577_row10_col1\" class=\"data row10 col1\" >binary 0/1</td>\n      <td id=\"T_a6577_row10_col2\" class=\"data row10 col2\" >3317</td>\n      <td id=\"T_a6577_row10_col3\" class=\"data row10 col3\" >age_cat</td>\n      <td id=\"T_a6577_row10_col4\" class=\"data row10 col4\" >Less than 25</td>\n      <td id=\"T_a6577_row10_col5\" class=\"data row10 col5\" >0.617397</td>\n      <td id=\"T_a6577_row10_col6\" class=\"data row10 col6\" >0.739583</td>\n      <td id=\"T_a6577_row10_col7\" class=\"data row10 col7\" >0.458647</td>\n      <td id=\"T_a6577_row10_col8\" class=\"data row10 col8\" >0.424528</td>\n      <td id=\"T_a6577_row10_col9\" class=\"data row10 col9\" >0.360360</td>\n      <td id=\"T_a6577_row10_col10\" class=\"data row10 col10\" >0.541353</td>\n      <td id=\"T_a6577_row10_col11\" class=\"data row10 col11\" >0.260417</td>\n      <td id=\"T_a6577_row10_col12\" class=\"data row10 col12\" >0.575472</td>\n      <td id=\"T_a6577_row10_col13\" class=\"data row10 col13\" >0.639640</td>\n      <td id=\"T_a6577_row10_col14\" class=\"data row10 col14\" >999</td>\n      <td id=\"T_a6577_row10_col15\" class=\"data row10 col15\" >530</td>\n      <td id=\"T_a6577_row10_col16\" class=\"data row10 col16\" >0.301176</td>\n      <td id=\"T_a6577_row10_col17\" class=\"data row10 col17\" >0.653368</td>\n      <td id=\"T_a6577_row10_col18\" class=\"data row10 col18\" >360</td>\n      <td id=\"T_a6577_row10_col19\" class=\"data row10 col19\" >225</td>\n      <td id=\"T_a6577_row10_col20\" class=\"data row10 col20\" >305</td>\n      <td id=\"T_a6577_row10_col21\" class=\"data row10 col21\" >639</td>\n      <td id=\"T_a6577_row10_col22\" class=\"data row10 col22\" >864</td>\n      <td id=\"T_a6577_row10_col23\" class=\"data row10 col23\" >665</td>\n      <td id=\"T_a6577_row10_col24\" class=\"data row10 col24\" >1529</td>\n      <td id=\"T_a6577_row10_col25\" class=\"data row10 col25\" >7214</td>\n      <td id=\"T_a6577_row10_col26\" class=\"data row10 col26\" >0.565075</td>\n      <td id=\"T_a6577_row10_col27\" class=\"data row10 col27\" >0.519231</td>\n      <td id=\"T_a6577_row10_col28\" class=\"data row10 col28\" >1.395369</td>\n      <td id=\"T_a6577_row10_col29\" class=\"data row10 col29\" >1.040293</td>\n      <td id=\"T_a6577_row10_col30\" class=\"data row10 col30\" >0.935673</td>\n      <td id=\"T_a6577_row10_col31\" class=\"data row10 col31\" >1.313873</td>\n      <td id=\"T_a6577_row10_col32\" class=\"data row10 col32\" >1.621868</td>\n      <td id=\"T_a6577_row10_col33\" class=\"data row10 col33\" >0.696781</td>\n      <td id=\"T_a6577_row10_col34\" class=\"data row10 col34\" >1.180958</td>\n      <td id=\"T_a6577_row10_col35\" class=\"data row10 col35\" >0.688435</td>\n      <td id=\"T_a6577_row10_col36\" class=\"data row10 col36\" >0.850173</td>\n      <td id=\"T_a6577_row10_col37\" class=\"data row10 col37\" >25 - 45</td>\n      <td id=\"T_a6577_row10_col38\" class=\"data row10 col38\" >25 - 45</td>\n      <td id=\"T_a6577_row10_col39\" class=\"data row10 col39\" >25 - 45</td>\n      <td id=\"T_a6577_row10_col40\" class=\"data row10 col40\" >25 - 45</td>\n      <td id=\"T_a6577_row10_col41\" class=\"data row10 col41\" >25 - 45</td>\n      <td id=\"T_a6577_row10_col42\" class=\"data row10 col42\" >25 - 45</td>\n      <td id=\"T_a6577_row10_col43\" class=\"data row10 col43\" >25 - 45</td>\n      <td id=\"T_a6577_row10_col44\" class=\"data row10 col44\" >25 - 45</td>\n      <td id=\"T_a6577_row10_col45\" class=\"data row10 col45\" >25 - 45</td>\n      <td id=\"T_a6577_row10_col46\" class=\"data row10 col46\" >25 - 45</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n<br>\n\nAs before, we can now use this matrix for creating plots in order to visualize disparities between races. In the next plot, we are comparing our reference group to all other races, using the False Positive values (as these can be considered the most problematic in this application).\n\nThe size of the boxes indicates the group size, the color and the according scale indicate the disparity between the compared groups. The plot shows that compared to the Caucasian reference group, the False Positive rate for African-American defendants is nearly two times higher, indicating a clear sign of unfairness/bias.\n\n::: {#d6af0ffa .cell execution_count=13}\n``` {.python .cell-code code-fold=\"true\"}\naqp.plot_disparity(bdf, group_metric='fpr_disparity', attribute_name='race', significance_alpha=0.05)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-1.png){width=412 height=416}\n:::\n:::\n\n\nAs an intermediate result, the aequitas-library works well for calculating key bias and fairness metrics and includes helpful functions for intuitively plotting the results. As this first part of the tutorial was aiming on giving a first glance at the data, it was largely built on the aequitas documentation. In the next part, we are shifting the focus away from bias detection and more towards bias mitigation. The second part introcudes a Neural Network that is trained for predicting recidivism and later tuned in order to find the optimal number of units and dropout rate.\n\n\n# Part 2: Neural Network Classifier for Fair Data Distribution\n\n\n### Loading the data\n\nNot that in this version of the data, some more variables/alternative labels are included:\n\n* **two_year_recid**, indicating if the person has recidivated within two years\n\n* **target**, the binary risk score\n\n* The charge degree of defendants where F: felony and M: misdemeanor\n\n* **juv_fel_count**, containing the number of juvenile felonies\n\n* **juv_misd_count**, containing the number of juvenile misdemeanors\n\n* **juv_other_count**, containing the number of prior juvenile convictions which are not considered felonies or misdemeanors\n\n* **priors_count**, containing the number of prior crimes committed\n\n::: {#70e9066a .cell execution_count=14}\n``` {.python .cell-code}\ndf_compas = pd.read_csv(\"https://raw.githubusercontent.com/jurjoroa/DeepLearning_bias_NLP/JorgeRoa/data_set.csv\")\ndf_compas.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sex</th>\n      <th>age</th>\n      <th>race</th>\n      <th>juv_fel_count</th>\n      <th>juv_misd_count</th>\n      <th>juv_other_count</th>\n      <th>priors_count</th>\n      <th>charge_degree</th>\n      <th>target</th>\n      <th>two_year_recid</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>34</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>24</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>4</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>23</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>41</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>14</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>39</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\nFirst, we are writing some functions that are later used for creating the accuracy and loss plots.\n\n<br>\n\n# Metric Plot\n\n::: {#a6562ae4 .cell execution_count=15}\n``` {.python .cell-code}\ndef plot_metric(history, metric):\n    train_metrics = history.history[metric]\n    val_metrics = history.history['val_'+metric]\n    epochs = range(1, len(train_metrics) + 1)\n    plt.plot(epochs, train_metrics, 'bo-',marker=None)\n    plt.plot(epochs, val_metrics, 'ro-',marker=None)\n    plt.title('Training and validation '+ metric)\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(metric)\n    plt.legend([\"train_\"+metric, 'val_'+metric])\n    plt.show()\n```\n:::\n\n\n<br>\n\nNext, we are defining function that we can use to fit our feed forward neural network. We are using ReLU-activation functions for the first three layers and a sigmoid activation function for the output layer (since we are dealing with a classification problem). Moreover, we are using binary crossentropy as our loss function and Adaptive Moment Estimation for minimizing the loss function. We tried to experiment with number of layers, the activation functions, and the droupout rates, but received quite similar results.\n\n::: {#4be65d88 .cell execution_count=16}\n``` {.python .cell-code}\ndef nn_classifier(n_features):\n    inputs = Input(shape = (n_features,))\n    dense1 = Dense(40, activation = 'relu')(inputs)\n    dropout1 = Dropout(.4)(dense1)\n    dense2 = Dense(40, activation = 'relu')(dropout1)\n    dropout2 = Dropout(.3)(dense2)\n    dense3 = Dense(32, activation = 'relu')(dropout2)\n    dropout3 = Dropout(.3)(dense3)\n    outputs = Dense(1, activation = 'sigmoid')(dropout3)\n    model = Model(inputs = [inputs], outputs = [outputs])\n    opt = Adam(learning_rate=0.001)\n    model.compile(loss = 'binary_crossentropy', optimizer = opt, metrics = ['accuracy'])\n    return model\n\n```\n:::\n\n\n<br>\n\nBefore fitting our defined model, we need to conduct some more data manipulation steps and define our predictor and target features. First, we one hot encode categorial variables (here: the charge degree). Second, we exclude sex and race from the predictors. We define our target variable to be the binary score whether a defendant committed crime within two years after the first incident. Additionally, the data is normalized using MinMaxScaler().\n\n<br>\n\n::: {#5307d3f5 .cell execution_count=17}\n``` {.python .cell-code}\n# One Hot encoding for categorical variable\ncharge_degree = pd.get_dummies(df_compas['charge_degree'])\n\ncharge_degree.columns = ['charge_degree_' + str(x) for x in charge_degree.columns]\ndf_compas = pd.concat([df_compas, charge_degree], axis=1)\n\ndf_compas.drop(['charge_degree'], axis=1, inplace=True)\n\nX = df_compas.copy()\n\n# Sensible attributes (we want to exclude them from training to avoid \"intentional\" bias)\nZ_race = X.pop('race')\nZ_sex = X.pop('sex')\nZ_data = {'race': Z_race, 'sex': Z_sex}\nZ = pd.concat(Z_data, axis = 1)\n\n# Target: COMPAS risk prediction, 1 = Risk of recidivism, 0 = No risk\ny = X.pop('target')\n\n# Actual observed criminal activity reported within 2 years from compas score,\n# 1 = the person committed a crime\n# 0 = Not a recidivist\ny_factual = X.pop('two_year_recid')\nX.head()\n\nnp.random.seed(7)\nX_train, X_test, y_train, y_test, y_factual_train, y_factual_test, Z_train, Z_test = train_test_split(X, y, y_factual, Z, test_size = 0.4,\n                                                                    stratify = y, random_state = 7)\n# Normalize the data\nscaler = MinMaxScaler().fit(X_train)\nscale_df = lambda df, scaler: pd.DataFrame(scaler.transform(df), columns = df.columns, index = df.index)\nX_train = X_train.pipe(scale_df, scaler)\nX_test = X_test.pipe(scale_df, scaler)\n\n```\n:::\n\n\n<br>\n\nNow, we can fit our model! We are training over 50 epochs.\n\n<br>\n\n::: {#f6f9e830 .cell execution_count=18}\n``` {.python .cell-code code-fold=\"true\"}\nnp.random.seed(7)\n\nclf_1 = nn_classifier(n_features = X_train.shape[1])\nhistory = clf_1.fit(X_train, y_train.values, epochs = 50, verbose = 2,validation_data = (X_test, y_test))\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch 1/50\n116/116 - 1s - 6ms/step - accuracy: 0.5512 - loss: 0.6829 - val_accuracy: 0.5890 - val_loss: 0.6623\nEpoch 2/50\n116/116 - 0s - 868us/step - accuracy: 0.6266 - loss: 0.6455 - val_accuracy: 0.7053 - val_loss: 0.5914\nEpoch 3/50\n116/116 - 0s - 879us/step - accuracy: 0.6827 - loss: 0.5989 - val_accuracy: 0.7272 - val_loss: 0.5472\nEpoch 4/50\n116/116 - 0s - 866us/step - accuracy: 0.6967 - loss: 0.5773 - val_accuracy: 0.7297 - val_loss: 0.5403\nEpoch 5/50\n116/116 - 0s - 854us/step - accuracy: 0.7095 - loss: 0.5652 - val_accuracy: 0.7260 - val_loss: 0.5344\nEpoch 6/50\n116/116 - 0s - 871us/step - accuracy: 0.7187 - loss: 0.5539 - val_accuracy: 0.7264 - val_loss: 0.5326\nEpoch 7/50\n116/116 - 0s - 867us/step - accuracy: 0.7266 - loss: 0.5472 - val_accuracy: 0.7272 - val_loss: 0.5263\nEpoch 8/50\n116/116 - 0s - 831us/step - accuracy: 0.7317 - loss: 0.5428 - val_accuracy: 0.7289 - val_loss: 0.5244\nEpoch 9/50\n116/116 - 0s - 872us/step - accuracy: 0.7290 - loss: 0.5427 - val_accuracy: 0.7321 - val_loss: 0.5249\nEpoch 10/50\n116/116 - 0s - 856us/step - accuracy: 0.7331 - loss: 0.5333 - val_accuracy: 0.7252 - val_loss: 0.5282\nEpoch 11/50\n116/116 - 0s - 1ms/step - accuracy: 0.7341 - loss: 0.5379 - val_accuracy: 0.7285 - val_loss: 0.5220\nEpoch 12/50\n116/116 - 0s - 859us/step - accuracy: 0.7358 - loss: 0.5370 - val_accuracy: 0.7289 - val_loss: 0.5209\nEpoch 13/50\n116/116 - 0s - 863us/step - accuracy: 0.7377 - loss: 0.5343 - val_accuracy: 0.7325 - val_loss: 0.5217\nEpoch 14/50\n116/116 - 0s - 906us/step - accuracy: 0.7322 - loss: 0.5352 - val_accuracy: 0.7305 - val_loss: 0.5209\nEpoch 15/50\n116/116 - 0s - 884us/step - accuracy: 0.7404 - loss: 0.5331 - val_accuracy: 0.7260 - val_loss: 0.5205\nEpoch 16/50\n116/116 - 0s - 867us/step - accuracy: 0.7301 - loss: 0.5321 - val_accuracy: 0.7264 - val_loss: 0.5209\nEpoch 17/50\n116/116 - 0s - 856us/step - accuracy: 0.7336 - loss: 0.5303 - val_accuracy: 0.7321 - val_loss: 0.5179\nEpoch 18/50\n116/116 - 0s - 865us/step - accuracy: 0.7423 - loss: 0.5270 - val_accuracy: 0.7260 - val_loss: 0.5181\nEpoch 19/50\n116/116 - 0s - 864us/step - accuracy: 0.7328 - loss: 0.5264 - val_accuracy: 0.7256 - val_loss: 0.5206\nEpoch 20/50\n116/116 - 0s - 901us/step - accuracy: 0.7409 - loss: 0.5274 - val_accuracy: 0.7276 - val_loss: 0.5191\nEpoch 21/50\n116/116 - 0s - 856us/step - accuracy: 0.7333 - loss: 0.5299 - val_accuracy: 0.7309 - val_loss: 0.5188\nEpoch 22/50\n116/116 - 0s - 851us/step - accuracy: 0.7407 - loss: 0.5304 - val_accuracy: 0.7309 - val_loss: 0.5189\nEpoch 23/50\n116/116 - 0s - 937us/step - accuracy: 0.7360 - loss: 0.5321 - val_accuracy: 0.7325 - val_loss: 0.5186\nEpoch 24/50\n116/116 - 0s - 923us/step - accuracy: 0.7404 - loss: 0.5302 - val_accuracy: 0.7362 - val_loss: 0.5191\nEpoch 25/50\n116/116 - 0s - 861us/step - accuracy: 0.7450 - loss: 0.5291 - val_accuracy: 0.7285 - val_loss: 0.5189\nEpoch 26/50\n116/116 - 0s - 861us/step - accuracy: 0.7415 - loss: 0.5274 - val_accuracy: 0.7301 - val_loss: 0.5203\nEpoch 27/50\n116/116 - 0s - 836us/step - accuracy: 0.7409 - loss: 0.5289 - val_accuracy: 0.7289 - val_loss: 0.5182\nEpoch 28/50\n116/116 - 0s - 859us/step - accuracy: 0.7415 - loss: 0.5239 - val_accuracy: 0.7317 - val_loss: 0.5177\nEpoch 29/50\n116/116 - 0s - 864us/step - accuracy: 0.7374 - loss: 0.5290 - val_accuracy: 0.7337 - val_loss: 0.5180\nEpoch 30/50\n116/116 - 0s - 846us/step - accuracy: 0.7347 - loss: 0.5276 - val_accuracy: 0.7276 - val_loss: 0.5176\nEpoch 31/50\n116/116 - 0s - 842us/step - accuracy: 0.7366 - loss: 0.5224 - val_accuracy: 0.7366 - val_loss: 0.5205\nEpoch 32/50\n116/116 - 0s - 874us/step - accuracy: 0.7398 - loss: 0.5266 - val_accuracy: 0.7321 - val_loss: 0.5173\nEpoch 33/50\n116/116 - 0s - 846us/step - accuracy: 0.7415 - loss: 0.5247 - val_accuracy: 0.7305 - val_loss: 0.5164\nEpoch 34/50\n116/116 - 0s - 888us/step - accuracy: 0.7444 - loss: 0.5266 - val_accuracy: 0.7289 - val_loss: 0.5184\nEpoch 35/50\n116/116 - 0s - 821us/step - accuracy: 0.7320 - loss: 0.5333 - val_accuracy: 0.7272 - val_loss: 0.5194\nEpoch 36/50\n116/116 - 0s - 861us/step - accuracy: 0.7388 - loss: 0.5293 - val_accuracy: 0.7280 - val_loss: 0.5181\nEpoch 37/50\n116/116 - 0s - 845us/step - accuracy: 0.7366 - loss: 0.5277 - val_accuracy: 0.7301 - val_loss: 0.5171\nEpoch 38/50\n116/116 - 0s - 851us/step - accuracy: 0.7434 - loss: 0.5236 - val_accuracy: 0.7317 - val_loss: 0.5188\nEpoch 39/50\n116/116 - 0s - 846us/step - accuracy: 0.7366 - loss: 0.5286 - val_accuracy: 0.7333 - val_loss: 0.5169\nEpoch 40/50\n116/116 - 0s - 847us/step - accuracy: 0.7352 - loss: 0.5286 - val_accuracy: 0.7329 - val_loss: 0.5165\nEpoch 41/50\n116/116 - 0s - 845us/step - accuracy: 0.7409 - loss: 0.5232 - val_accuracy: 0.7346 - val_loss: 0.5195\nEpoch 42/50\n116/116 - 0s - 891us/step - accuracy: 0.7344 - loss: 0.5296 - val_accuracy: 0.7256 - val_loss: 0.5189\nEpoch 43/50\n116/116 - 0s - 837us/step - accuracy: 0.7420 - loss: 0.5231 - val_accuracy: 0.7289 - val_loss: 0.5168\nEpoch 44/50\n116/116 - 0s - 847us/step - accuracy: 0.7417 - loss: 0.5267 - val_accuracy: 0.7325 - val_loss: 0.5171\nEpoch 45/50\n116/116 - 0s - 865us/step - accuracy: 0.7363 - loss: 0.5272 - val_accuracy: 0.7346 - val_loss: 0.5188\nEpoch 46/50\n116/116 - 0s - 880us/step - accuracy: 0.7366 - loss: 0.5264 - val_accuracy: 0.7341 - val_loss: 0.5177\nEpoch 47/50\n116/116 - 0s - 839us/step - accuracy: 0.7398 - loss: 0.5246 - val_accuracy: 0.7313 - val_loss: 0.5166\nEpoch 48/50\n116/116 - 0s - 846us/step - accuracy: 0.7442 - loss: 0.5270 - val_accuracy: 0.7346 - val_loss: 0.5184\nEpoch 49/50\n116/116 - 0s - 861us/step - accuracy: 0.7371 - loss: 0.5256 - val_accuracy: 0.7289 - val_loss: 0.5173\nEpoch 50/50\n116/116 - 0s - 848us/step - accuracy: 0.7444 - loss: 0.5214 - val_accuracy: 0.7256 - val_loss: 0.5211\n```\n:::\n:::\n\n\n<br>\n\nFrom the output, we can already tell that the model improved over epochs, as loss decreased and accuracy increased. Let's use our predefined plot_metric function to view the results:\n\n<br>\n\n::: {#65454bbf .cell execution_count=19}\n``` {.python .cell-code code-fold=\"true\"}\nplot_metric(history, 'loss')\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-20-output-1.png){width=640 height=479}\n:::\n:::\n\n\n<br>\n\n::: {#f16a5f7e .cell execution_count=20}\n``` {.python .cell-code code-fold=\"true\"}\nclf_1.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nplot_metric(history, 'accuracy')\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-21-output-1.png){width=627 height=479}\n:::\n:::\n\n\n<br>\n\nAs we can se, the predicitions quickly approach an accuracy value of around 70 to 75 per cent in both training and validation. After 50 epochs, we are left with accuracy values around 75%. Next, we are adapting our NN-classifier using keras and try to find the optimal hyperparameters and see whether we are able to improve the performance. For that purpose, we are adapting the classifier and experiment with varying values for the number of units in each layer, the dropout rates, and the learning rate.\n\n<br>\n\n::: {#d52e5ad6 .cell execution_count=21}\n``` {.python .cell-code}\ndef nn_classifier(hp, n_features):\n    inputs = Input(shape=(n_features,))\n    x = inputs\n\n    # Tuning the number of units in the first dense layer\n    hp_units1 = hp.Int('units1', min_value=32, max_value=512, step=32)\n    x = Dense(units=hp_units1, activation='relu')(x)\n    hp_dropout1 = hp.Float('dropout1', min_value=0.0, max_value=0.5, step=0.1)\n    x = Dropout(rate=hp_dropout1)(x)\n\n    # Tuning the number of units in the second dense layer\n    hp_units2 = hp.Int('units2', min_value=32, max_value=512, step=32)\n    x = Dense(units=hp_units2, activation='relu')(x)\n    hp_dropout2 = hp.Float('dropout2', min_value=0.0, max_value=0.5, step=0.1)\n    x = Dropout(rate=hp_dropout2)(x)\n\n    # Tuning the number of units in the third dense layer\n    hp_units3 = hp.Int('units3', min_value=32, max_value=512, step=32)\n    x = Dense(units=hp_units3, activation='relu')(x)\n    hp_dropout3 = hp.Float('dropout3', min_value=0.0, max_value=0.5, step=0.1)\n    x = Dropout(rate=hp_dropout3)(x)\n\n    outputs = Dense(1, activation='sigmoid')(x)\n\n    model = Model(inputs=inputs, outputs=outputs)\n\n    # Tuning the learning rate for the optimizer\n    hp_learning_rate = hp.Choice('learning_rate', values=[1e-2, 1e-3, 1e-4])\n\n    model.compile(optimizer=Adam(learning_rate=hp_learning_rate),\n                  loss='binary_crossentropy',\n                  metrics=['accuracy'])\n\n    return model\n```\n:::\n\n\n<br>\n\n::: {#f57c93bf .cell execution_count=22}\n``` {.python .cell-code}\ndef build_model(hp):\n    return nn_classifier(hp, n_features=X_train.shape[1])\n\n# Instantiate the tuner\ntuner = kt.Hyperband(\n    build_model,\n    objective='val_accuracy',\n    max_epochs=50,\n    directory='keras_tuner',\n    project_name='nn_tuning',\n    factor=3,\n    hyperband_iterations=2\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReloading Tuner from keras_tuner/nn_tuning/tuner0.json\n```\n:::\n:::\n\n\n<br>\n\nThe next chunk takes some time to execute. It used the previously defined tuner for finding the optimal hyperparameter values. We also included early stopping in case that the validation loss is minimized early.\n\n\n<br>\n\n::: {#37da4354 .cell execution_count=23}\n``` {.python .cell-code}\n# Create a callback to stop training early after reaching a certain value for the validation loss\nstop_early = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5)\n\n# Execute the hyperparameter search\ntuner.search(X_train, y_train, epochs=50, validation_data=(X_test, y_test), callbacks=[stop_early])\n\n# Get the optimal hyperparameters\nbest_hps = tuner.get_best_hyperparameters(num_trials=1)[0]\n\nprint(f\"\"\"\nThe hyperparameter search is complete. The optimal number of units in the first densely-connected\nlayer is {best_hps.get('units1')}, in the second layer is {best_hps.get('units2')}, and in the third layer is {best_hps.get('units3')}.\nThe optimal dropout rates are {best_hps.get('dropout1')}, {best_hps.get('dropout2')}, and {best_hps.get('dropout3')}.\nThe optimal learning rate for the optimizer is {best_hps.get('learning_rate')}.\n\"\"\")\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nThe hyperparameter search is complete. The optimal number of units in the first densely-connected\nlayer is 512, in the second layer is 128, and in the third layer is 416.\nThe optimal dropout rates are 0.4, 0.1, and 0.2.\nThe optimal learning rate for the optimizer is 0.01.\n\n```\n:::\n:::\n\n\n<br>\n\n\nAs the previous cell's output shows, we received optimal values for the number of units in each layer, the dropout rates, and the Adam opimizer's learning rate. Ultimately, we fit our original model with the optimal hyperparameters. As we can see, the performance stays relatively constant in comparison with our previous model.\n\n<br>\n\n::: {#2e1f460a .cell execution_count=24}\n``` {.python .cell-code}\n# Build the model with the optimal hyperparameters and train it on the data\nmodel = tuner.hypermodel.build(best_hps)\nhistory = model.fit(X_train, y_train, epochs=50, validation_data=(X_test, y_test))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEpoch 1/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1:08 591ms/step - accuracy: 0.4062 - loss: 0.6967\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 32/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.6064 - loss: 0.6360    \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 62/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.6420 - loss: 0.6107\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 93/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.6554 - loss: 0.6002\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 3ms/step - accuracy: 0.6630 - loss: 0.5942 - val_accuracy: 0.7248 - val_loss: 0.5341\nEpoch 2/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.6562 - loss: 0.5527\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 25/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7183 - loss: 0.5441 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 50/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7102 - loss: 0.5478\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 75/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7099 - loss: 0.5497\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r101/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7117 - loss: 0.5495\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 3ms/step - accuracy: 0.7132 - loss: 0.5491 - val_accuracy: 0.7240 - val_loss: 0.5362\nEpoch 3/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 12ms/step - accuracy: 0.6562 - loss: 0.6802\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 26/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.6889 - loss: 0.5891 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 52/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.6898 - loss: 0.5792\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 78/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.6940 - loss: 0.5745\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r104/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.6990 - loss: 0.5700\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7007 - loss: 0.5682 - val_accuracy: 0.7220 - val_loss: 0.5295\nEpoch 4/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.7500 - loss: 0.6255\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 25/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7201 - loss: 0.5837 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 51/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7174 - loss: 0.5750\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 77/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7208 - loss: 0.5650\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r103/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7222 - loss: 0.5601\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7226 - loss: 0.5588 - val_accuracy: 0.7163 - val_loss: 0.5352\nEpoch 5/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 12ms/step - accuracy: 0.7500 - loss: 0.5249\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7560 - loss: 0.5110 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 53/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7472 - loss: 0.5217\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 79/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7422 - loss: 0.5271\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r104/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7384 - loss: 0.5316\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7367 - loss: 0.5338 - val_accuracy: 0.7285 - val_loss: 0.5223\nEpoch 6/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 12ms/step - accuracy: 0.7812 - loss: 0.5259\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 26/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7361 - loss: 0.5680 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 53/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7330 - loss: 0.5632\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 79/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7325 - loss: 0.5608\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r105/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7320 - loss: 0.5587\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7320 - loss: 0.5574 - val_accuracy: 0.7053 - val_loss: 0.5501\nEpoch 7/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.7500 - loss: 0.5031\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.6920 - loss: 0.5686 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 53/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7024 - loss: 0.5582\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 80/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7070 - loss: 0.5559\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r106/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7107 - loss: 0.5533\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7116 - loss: 0.5527 - val_accuracy: 0.7260 - val_loss: 0.5336\nEpoch 8/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.6562 - loss: 0.5842\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 22/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7117 - loss: 0.5538 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 48/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7189 - loss: 0.5509\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 74/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7241 - loss: 0.5481\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r101/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7254 - loss: 0.5474\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 3ms/step - accuracy: 0.7258 - loss: 0.5472 - val_accuracy: 0.7280 - val_loss: 0.5258\nEpoch 9/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.6875 - loss: 0.6027\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7183 - loss: 0.5446 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 53/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7236 - loss: 0.5325\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 79/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7214 - loss: 0.5343\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r105/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7204 - loss: 0.5350\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7208 - loss: 0.5348 - val_accuracy: 0.7293 - val_loss: 0.5244\nEpoch 10/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.6875 - loss: 0.4935\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 28/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7322 - loss: 0.5131 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 55/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7316 - loss: 0.5244\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 81/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7317 - loss: 0.5278\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r108/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7327 - loss: 0.5296\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7329 - loss: 0.5303 - val_accuracy: 0.7293 - val_loss: 0.5293\nEpoch 11/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 12ms/step - accuracy: 0.7500 - loss: 0.5361\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7352 - loss: 0.5274 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 54/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7398 - loss: 0.5302\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 80/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7401 - loss: 0.5334\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r106/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7398 - loss: 0.5348\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7392 - loss: 0.5353 - val_accuracy: 0.7154 - val_loss: 0.5491\nEpoch 12/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.8750 - loss: 0.4636\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7363 - loss: 0.5397 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 53/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7291 - loss: 0.5461\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 80/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7263 - loss: 0.5478\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r107/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7250 - loss: 0.5480\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7251 - loss: 0.5475 - val_accuracy: 0.7301 - val_loss: 0.5283\nEpoch 13/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.6250 - loss: 0.8070\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7139 - loss: 0.5634 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 53/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7165 - loss: 0.5553\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 79/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7176 - loss: 0.5533\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r105/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7197 - loss: 0.5508\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7207 - loss: 0.5500 - val_accuracy: 0.7321 - val_loss: 0.5215\nEpoch 14/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 12ms/step - accuracy: 0.7188 - loss: 0.4898\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7698 - loss: 0.5040 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 52/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7480 - loss: 0.5256\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 79/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7399 - loss: 0.5321\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r105/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7374 - loss: 0.5345\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7369 - loss: 0.5348 - val_accuracy: 0.7211 - val_loss: 0.5293\nEpoch 15/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 12ms/step - accuracy: 0.7812 - loss: 0.4526\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 28/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7341 - loss: 0.5190 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 54/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7288 - loss: 0.5315\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 80/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7275 - loss: 0.5356\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r107/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7261 - loss: 0.5382\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7262 - loss: 0.5385 - val_accuracy: 0.7256 - val_loss: 0.5305\nEpoch 16/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.7500 - loss: 0.4919\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 28/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7358 - loss: 0.5390 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 54/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7375 - loss: 0.5378\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 80/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7362 - loss: 0.5363\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r107/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7343 - loss: 0.5363\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7337 - loss: 0.5367 - val_accuracy: 0.7252 - val_loss: 0.5219\nEpoch 17/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.7812 - loss: 0.4652\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7520 - loss: 0.5075 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 53/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7449 - loss: 0.5166\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 79/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7428 - loss: 0.5185\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r105/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7413 - loss: 0.5213\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7406 - loss: 0.5226 - val_accuracy: 0.7280 - val_loss: 0.5228\nEpoch 18/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 12ms/step - accuracy: 0.7188 - loss: 0.4849\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 28/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7289 - loss: 0.5403 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 55/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7236 - loss: 0.5465\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 81/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7253 - loss: 0.5438\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r107/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7261 - loss: 0.5430\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7265 - loss: 0.5424 - val_accuracy: 0.7301 - val_loss: 0.5416\nEpoch 19/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 12ms/step - accuracy: 0.8125 - loss: 0.5372\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7428 - loss: 0.5240 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 53/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7364 - loss: 0.5298\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 81/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7320 - loss: 0.5344\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r106/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7294 - loss: 0.5370\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7294 - loss: 0.5369 - val_accuracy: 0.7252 - val_loss: 0.5239\nEpoch 20/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.7188 - loss: 0.4758\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 28/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7299 - loss: 0.5484 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 54/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7275 - loss: 0.5533\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 80/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7311 - loss: 0.5483\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r106/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7327 - loss: 0.5458\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7332 - loss: 0.5448 - val_accuracy: 0.7293 - val_loss: 0.5242\nEpoch 21/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.7500 - loss: 0.5325\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 28/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7448 - loss: 0.5266 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 54/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7429 - loss: 0.5292\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 80/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7385 - loss: 0.5327\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r106/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7368 - loss: 0.5342\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7365 - loss: 0.5345 - val_accuracy: 0.7346 - val_loss: 0.5218\nEpoch 22/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 12ms/step - accuracy: 0.8438 - loss: 0.3739\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 26/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7617 - loss: 0.4720 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 53/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7425 - loss: 0.4994\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 77/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7376 - loss: 0.5090\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r101/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7364 - loss: 0.5142\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 3ms/step - accuracy: 0.7358 - loss: 0.5168 - val_accuracy: 0.7341 - val_loss: 0.5213\nEpoch 23/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.5938 - loss: 0.6723\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 25/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7074 - loss: 0.5786 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 50/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7249 - loss: 0.5596\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 74/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7273 - loss: 0.5535\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 99/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7283 - loss: 0.5501\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 3ms/step - accuracy: 0.7287 - loss: 0.5478 - val_accuracy: 0.7276 - val_loss: 0.5232\nEpoch 24/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 14ms/step - accuracy: 0.7188 - loss: 0.5644\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 25/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7234 - loss: 0.5477 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 49/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7283 - loss: 0.5410\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 74/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7293 - loss: 0.5391\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 99/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7303 - loss: 0.5383\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 3ms/step - accuracy: 0.7301 - loss: 0.5386 - val_accuracy: 0.7317 - val_loss: 0.5183\nEpoch 25/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 12ms/step - accuracy: 0.7500 - loss: 0.5826\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 26/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7509 - loss: 0.5277 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 51/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7449 - loss: 0.5302\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 77/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7418 - loss: 0.5324\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r103/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7398 - loss: 0.5342\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7390 - loss: 0.5350 - val_accuracy: 0.7268 - val_loss: 0.5292\nEpoch 26/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.6875 - loss: 0.5461\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 26/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7027 - loss: 0.5561 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 52/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7094 - loss: 0.5538\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 77/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7149 - loss: 0.5491\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r104/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7201 - loss: 0.5445\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7217 - loss: 0.5431 - val_accuracy: 0.7289 - val_loss: 0.5324\nEpoch 27/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.6562 - loss: 0.5515\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 28/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.6963 - loss: 0.5457 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 55/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7141 - loss: 0.5372\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 82/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7199 - loss: 0.5353\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r108/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7227 - loss: 0.5355\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7234 - loss: 0.5357 - val_accuracy: 0.7354 - val_loss: 0.5321\nEpoch 28/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 12ms/step - accuracy: 0.7188 - loss: 0.6131\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7288 - loss: 0.5429 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 54/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7251 - loss: 0.5430\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 81/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7269 - loss: 0.5400\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r107/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7286 - loss: 0.5375\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7292 - loss: 0.5367 - val_accuracy: 0.7305 - val_loss: 0.5225\nEpoch 29/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 12ms/step - accuracy: 0.6250 - loss: 0.6116\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.6898 - loss: 0.5830 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 54/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7065 - loss: 0.5684\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 81/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7131 - loss: 0.5604\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r107/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7159 - loss: 0.5567\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7168 - loss: 0.5555 - val_accuracy: 0.7244 - val_loss: 0.5305\nEpoch 30/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 12ms/step - accuracy: 0.6562 - loss: 0.5165\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.6996 - loss: 0.5484 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 54/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7066 - loss: 0.5449\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 78/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7099 - loss: 0.5438\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r104/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7130 - loss: 0.5430\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7141 - loss: 0.5429 - val_accuracy: 0.7276 - val_loss: 0.5265\nEpoch 31/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.7812 - loss: 0.5821\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 26/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7315 - loss: 0.5394 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 52/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7345 - loss: 0.5342\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 79/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7348 - loss: 0.5331\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r107/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7343 - loss: 0.5321\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7340 - loss: 0.5323 - val_accuracy: 0.7305 - val_loss: 0.5354\nEpoch 32/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.6875 - loss: 0.6333\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7181 - loss: 0.5528 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 53/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7179 - loss: 0.5503\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 79/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7196 - loss: 0.5502\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r105/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7222 - loss: 0.5496\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7232 - loss: 0.5490 - val_accuracy: 0.7276 - val_loss: 0.5191\nEpoch 33/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.6875 - loss: 0.4996\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7678 - loss: 0.4673 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 56/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7554 - loss: 0.4881\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 84/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7504 - loss: 0.4983\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r111/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7475 - loss: 0.5053\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7468 - loss: 0.5068 - val_accuracy: 0.7268 - val_loss: 0.5448\nEpoch 34/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 12ms/step - accuracy: 0.7188 - loss: 0.5336\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7504 - loss: 0.5185 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 52/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7465 - loss: 0.5232\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 78/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7434 - loss: 0.5262\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r105/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7408 - loss: 0.5290\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7400 - loss: 0.5303 - val_accuracy: 0.7276 - val_loss: 0.5293\nEpoch 35/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.6875 - loss: 0.5848\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 26/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7467 - loss: 0.5216 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 52/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7341 - loss: 0.5301\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 78/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7309 - loss: 0.5314\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r104/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7295 - loss: 0.5322\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 3ms/step - accuracy: 0.7290 - loss: 0.5327 - val_accuracy: 0.7341 - val_loss: 0.5202\nEpoch 36/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 14ms/step - accuracy: 0.7188 - loss: 0.5341\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 25/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7560 - loss: 0.5052 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 48/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7517 - loss: 0.5083\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 74/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7489 - loss: 0.5115\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r100/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7460 - loss: 0.5148\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 3ms/step - accuracy: 0.7443 - loss: 0.5168 - val_accuracy: 0.7366 - val_loss: 0.5327\nEpoch 37/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 12ms/step - accuracy: 0.6562 - loss: 0.5813\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7328 - loss: 0.5487 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 53/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7349 - loss: 0.5444\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 79/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7340 - loss: 0.5430\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r108/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7341 - loss: 0.5418\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7341 - loss: 0.5415 - val_accuracy: 0.7341 - val_loss: 0.5215\nEpoch 38/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.6875 - loss: 0.5430\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 29/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.6900 - loss: 0.5528 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 57/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.6990 - loss: 0.5490\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 85/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7069 - loss: 0.5447\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r111/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7116 - loss: 0.5419\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7125 - loss: 0.5414 - val_accuracy: 0.7268 - val_loss: 0.5371\nEpoch 39/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 12ms/step - accuracy: 0.7812 - loss: 0.4789\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7732 - loss: 0.5018 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 53/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7496 - loss: 0.5136\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 80/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7443 - loss: 0.5158\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r106/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7415 - loss: 0.5180\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7402 - loss: 0.5192 - val_accuracy: 0.7305 - val_loss: 0.5242\nEpoch 40/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.8438 - loss: 0.3997\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7512 - loss: 0.5157 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 53/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7451 - loss: 0.5281\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 79/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7416 - loss: 0.5319\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r106/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7397 - loss: 0.5331\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7391 - loss: 0.5332 - val_accuracy: 0.7297 - val_loss: 0.5192\nEpoch 41/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 12ms/step - accuracy: 0.6562 - loss: 0.6030\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 28/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.6962 - loss: 0.5603 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 54/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7122 - loss: 0.5504\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 77/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7182 - loss: 0.5479\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 93/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7217 - loss: 0.5465\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 3ms/step - accuracy: 0.7251 - loss: 0.5448 - val_accuracy: 0.7297 - val_loss: 0.5183\nEpoch 42/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.6875 - loss: 0.5016\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7526 - loss: 0.5071 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 53/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7484 - loss: 0.5167\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 79/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7469 - loss: 0.5199\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r106/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7451 - loss: 0.5214\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7438 - loss: 0.5225 - val_accuracy: 0.7313 - val_loss: 0.5248\nEpoch 43/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.6250 - loss: 0.6189\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.6785 - loss: 0.5785 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 53/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.6949 - loss: 0.5671\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 79/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7029 - loss: 0.5624\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r105/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7091 - loss: 0.5578\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7115 - loss: 0.5559 - val_accuracy: 0.7297 - val_loss: 0.5254\nEpoch 44/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.6875 - loss: 0.5720\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7147 - loss: 0.5472 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 54/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7156 - loss: 0.5461\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 81/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7189 - loss: 0.5452\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r107/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7217 - loss: 0.5430\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7226 - loss: 0.5422 - val_accuracy: 0.7293 - val_loss: 0.5255\nEpoch 45/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.7812 - loss: 0.4507\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7279 - loss: 0.5408 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 52/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7211 - loss: 0.5448\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 79/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7226 - loss: 0.5415\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r106/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7254 - loss: 0.5381\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7260 - loss: 0.5375 - val_accuracy: 0.7276 - val_loss: 0.5389\nEpoch 46/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.8125 - loss: 0.5217\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 26/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7552 - loss: 0.5437 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 52/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7495 - loss: 0.5384\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 74/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7448 - loss: 0.5378\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 96/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7425 - loss: 0.5371\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 3ms/step - accuracy: 0.7412 - loss: 0.5365 - val_accuracy: 0.7329 - val_loss: 0.5172\nEpoch 47/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.7188 - loss: 0.4508\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 25/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7251 - loss: 0.5200 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 50/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7326 - loss: 0.5267\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 75/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7322 - loss: 0.5309\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r100/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7316 - loss: 0.5329\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 3ms/step - accuracy: 0.7316 - loss: 0.5332 - val_accuracy: 0.7289 - val_loss: 0.5186\nEpoch 48/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 14ms/step - accuracy: 0.6875 - loss: 0.5576\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 26/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7111 - loss: 0.5343 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 51/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7120 - loss: 0.5366\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 76/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7162 - loss: 0.5351\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r100/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7178 - loss: 0.5354\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 3ms/step - accuracy: 0.7187 - loss: 0.5357 - val_accuracy: 0.7260 - val_loss: 0.5218\nEpoch 49/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 13ms/step - accuracy: 0.7812 - loss: 0.3832\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 27/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7431 - loss: 0.5050 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 52/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7292 - loss: 0.5256\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 75/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7229 - loss: 0.5344\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r100/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7219 - loss: 0.5372\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 3ms/step - accuracy: 0.7217 - loss: 0.5378 - val_accuracy: 0.7073 - val_loss: 0.5306\nEpoch 50/50\n\r  1/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 1s 12ms/step - accuracy: 0.7500 - loss: 0.5124\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 28/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.6979 - loss: 0.5587 \b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 54/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7041 - loss: 0.5542\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r 80/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7103 - loss: 0.5506\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r107/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7131 - loss: 0.5500\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r116/116 ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ 0s 2ms/step - accuracy: 0.7142 - loss: 0.5493 - val_accuracy: 0.7350 - val_loss: 0.5290\n```\n:::\n:::\n\n\n<br>\n\n# Part 3: Mitigating bias\n\nAfter having detected and replicated the bias, we now want to introduce different mitigation strategies - we'll begin with two preprocessing techniques, followed by one prost-processing technique - let's dive right in and see what we can do to get fairer results!\n\n## 3.1 Data Download\n\n*First* step, as usual, is to get our data:\n\n::: {#caabb2f0 .cell execution_count=25}\n``` {.python .cell-code}\ndf_compas_bias = pd.read_csv(\"https://raw.githubusercontent.com/propublica/compas-analysis/master/compas-scores-two-years.csv\")\ndf_compas_bias.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>name</th>\n      <th>first</th>\n      <th>last</th>\n      <th>compas_screening_date</th>\n      <th>sex</th>\n      <th>dob</th>\n      <th>age</th>\n      <th>age_cat</th>\n      <th>race</th>\n      <th>...</th>\n      <th>v_decile_score</th>\n      <th>v_score_text</th>\n      <th>v_screening_date</th>\n      <th>in_custody</th>\n      <th>out_custody</th>\n      <th>priors_count.1</th>\n      <th>start</th>\n      <th>end</th>\n      <th>event</th>\n      <th>two_year_recid</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>miguel hernandez</td>\n      <td>miguel</td>\n      <td>hernandez</td>\n      <td>2013-08-14</td>\n      <td>Male</td>\n      <td>1947-04-18</td>\n      <td>69</td>\n      <td>Greater than 45</td>\n      <td>Other</td>\n      <td>...</td>\n      <td>1</td>\n      <td>Low</td>\n      <td>2013-08-14</td>\n      <td>2014-07-07</td>\n      <td>2014-07-14</td>\n      <td>0</td>\n      <td>0</td>\n      <td>327</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>kevon dixon</td>\n      <td>kevon</td>\n      <td>dixon</td>\n      <td>2013-01-27</td>\n      <td>Male</td>\n      <td>1982-01-22</td>\n      <td>34</td>\n      <td>25 - 45</td>\n      <td>African-American</td>\n      <td>...</td>\n      <td>1</td>\n      <td>Low</td>\n      <td>2013-01-27</td>\n      <td>2013-01-26</td>\n      <td>2013-02-05</td>\n      <td>0</td>\n      <td>9</td>\n      <td>159</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4</td>\n      <td>ed philo</td>\n      <td>ed</td>\n      <td>philo</td>\n      <td>2013-04-14</td>\n      <td>Male</td>\n      <td>1991-05-14</td>\n      <td>24</td>\n      <td>Less than 25</td>\n      <td>African-American</td>\n      <td>...</td>\n      <td>3</td>\n      <td>Low</td>\n      <td>2013-04-14</td>\n      <td>2013-06-16</td>\n      <td>2013-06-16</td>\n      <td>4</td>\n      <td>0</td>\n      <td>63</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5</td>\n      <td>marcu brown</td>\n      <td>marcu</td>\n      <td>brown</td>\n      <td>2013-01-13</td>\n      <td>Male</td>\n      <td>1993-01-21</td>\n      <td>23</td>\n      <td>Less than 25</td>\n      <td>African-American</td>\n      <td>...</td>\n      <td>6</td>\n      <td>Medium</td>\n      <td>2013-01-13</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1174</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>6</td>\n      <td>bouthy pierrelouis</td>\n      <td>bouthy</td>\n      <td>pierrelouis</td>\n      <td>2013-03-26</td>\n      <td>Male</td>\n      <td>1973-01-22</td>\n      <td>43</td>\n      <td>25 - 45</td>\n      <td>Other</td>\n      <td>...</td>\n      <td>1</td>\n      <td>Low</td>\n      <td>2013-03-26</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1102</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows √ó 53 columns</p>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n## 3.1 Data Preprocessing\n\nTo further work with the data, we need to clean it up and only keep variables that we want to use for our analysis. The following code leaves us with only the relevant variables: We want to focus our tutorial on racial bias in the COMPAS dataset, thus we only keep the data for \"African-American\" and \"Caucasian\" individuals.Further, we map the age variables to numeric values, convert \"sex\" and \"charge_degree\" (F: Felony M: Misdemeanor) to binary variables. Last but not least, we drop the \"start2 and \"end\" variables after calculating the duration and adding it as a new variable.\n\n<br>\n\n::: {#5994614a .cell execution_count=26}\n``` {.python .cell-code}\n#Drop columns that we don't need\ncolumns_to_drop = ['id', 'name', 'first', 'last', 'compas_screening_date', 'dob', 'age', 'c_jail_in', 'c_jail_out',\n                   'c_case_number', 'c_offense_date', 'c_arrest_date', 'c_charge_desc', 'days_b_screening_arrest',\n                   'decile_score', 'r_case_number', 'r_days_from_arrest', 'r_offense_date', 'c_days_from_compas',\n                   'r_charge_degree', 'r_charge_desc', 'r_jail_in', 'r_jail_out', 'priors_count.1', 'violent_recid',\n                   'is_violent_recid', 'vr_case_number', 'vr_charge_degree', 'vr_offense_date', 'vr_charge_desc',\n                   'type_of_assessment', 'decile_score.1', 'score_text', 'is_recid', 'v_type_of_assessment',\n                   'screening_date', 'v_decile_score', 'v_score_text', 'v_screening_date', 'in_custody', 'out_custody',\n                   'event']\n\ndf_compas_bias_w = df_compas_bias.drop(columns=[col for col in columns_to_drop if col in df_compas_bias.columns])\n\n### Keep only white and black individuals\nrace_map = {'African-American':0, 'Caucasian':1, 'Asian':2, 'Hispanic':3, 'Native American':4, 'Other':5\n}\n\ndf_compas_bias_w['race'] = df_compas_bias_w['race'].apply(lambda x: race_map[x])\ndf_compas_bias_w = df_compas_bias_w[(df_compas_bias_w.race == 0.) | (df_compas_bias_w.race == 1.)]\n\n# Map age categories to numeric values\nage_map = {'Less than 25': 0, '25 - 45': 1, 'Greater than 45': 2}\ndf_compas_bias_w['age_cat'] = df_compas_bias_w['age_cat'].map(age_map)\n\n# Convert sex to binary values (Male: 0, Female: 1)\nsex_map = {'Male': 0, 'Female': 1}\ndf_compas_bias_w['sex'] = df_compas_bias_w['sex'].map(sex_map)\n\n# Convert charge degree to binary values (F: 1, M: 0)\ncharge_degree_map = {'F': 1., 'M': 0.}\ndf_compas_bias_w['c_charge_degree'] = df_compas_bias_w['c_charge_degree'].map(charge_degree_map)\n\n# Calculate duration in days and drop the original 'end' and 'start' columns\ndf_compas_bias_w['duration'] = (df_compas_bias_w['end'] - df_compas_bias_w['start'])\n\n#erase start and end\ndf_compas_bias_w = df_compas_bias_w.drop(columns=['start', 'end'])\n\ndf_compas_bias_w.head()\n\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sex</th>\n      <th>age_cat</th>\n      <th>race</th>\n      <th>juv_fel_count</th>\n      <th>juv_misd_count</th>\n      <th>juv_other_count</th>\n      <th>priors_count</th>\n      <th>c_charge_degree</th>\n      <th>two_year_recid</th>\n      <th>duration</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>150</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>4</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>63</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1174</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>14</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>35</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>745</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\nAs a next step, we want to separate our independent variables (X) from our target variable (Y) , namely \"two_year_recid\" (a Binary variable indicating whether the defendant is rearrested at within two years). Also, we use the MinMaxScaler from scikit-learn to normalize our features and the fit_transform method to rescale the features. We then have a look at our data, to see, if everything worked out well.\n\n<br>\n\n::: {#eeff412d .cell execution_count=27}\n``` {.python .cell-code}\n# Separate features (X) and target variable (y)\nX = df_compas_bias_w.drop(columns=['two_year_recid']).values\ny = df_compas_bias_w['two_year_recid'].values\n\n# Rescale the features for better performance\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX = scaler.fit_transform(X)\n\n# Display the first few rows of the modified DataFrame\ndf_compas_bias_w.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sex</th>\n      <th>age_cat</th>\n      <th>race</th>\n      <th>juv_fel_count</th>\n      <th>juv_misd_count</th>\n      <th>juv_other_count</th>\n      <th>priors_count</th>\n      <th>c_charge_degree</th>\n      <th>two_year_recid</th>\n      <th>duration</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>150</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>4</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>63</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>1174</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>14</td>\n      <td>1.0</td>\n      <td>1</td>\n      <td>35</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>745</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n## 3.3 Preprocessing Mitigation Techniques\n\n\n\n\nIn the next steps, we will predict, whether an individual will recidivate - in other words, we'll precict the target variable, \"two_year_recid\". To do this, we firstly split our data in a train and a test set. Then, we fit a logistic regression and print the accuracy and some other metrics.\n\n\n\n<br>\n\n::: {#dbef1bc4 .cell execution_count=28}\n``` {.python .cell-code}\n### Split to train / test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n### Fit logistic regression and print accuracy\nclf = LogisticRegression(random_state=42).fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n\nacc = np.sum(y_pred == y_test) / len(y_test)\nprint(\"Accuracy =\", np.round(acc, 3))\n\n# Precision\nprecision = precision_score(y_test, y_pred)\nprint(\"Precision =\", np.round(precision, 3))\n\n# Recall\nrecall = recall_score(y_test, y_pred)\nprint(\"Recall =\", np.round(recall, 3))\n\n# F1 Score\nf1 = f1_score(y_test, y_pred)\nprint(\"F1 Score =\", np.round(f1, 3))\n\n# Confusion Matrix\nconf_matrix = confusion_matrix(y_test, y_pred)\nprint(\"Confusion Matrix:\\n\", conf_matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAccuracy = 0.874\nPrecision = 0.851\nRecall = 0.89\nF1 Score = 0.87\nConfusion Matrix:\n [[838 136]\n [ 96 775]]\n```\n:::\n:::\n\n\n<br>\n\n## Ratio of African-American to Caucasians on the original data vs. in the precicted outcomes\n\nLet's have look at the distributions in our data, which plays an important role when dealing with fairness measures - as we learned in the first part of this tutorial. The code calculates the ratio of African-Americans in the data - apparently, for every Caucasian prisoner, there are approximately 1.51 African-American prisoners. The model predicts that African-American prisoners are 2.15 times more likely to reoffend than Caucasian prisoners. **This ratio being higher than the actual ratio of African-American to Caucasian prisoners, indicates a potential bias in the predictions towards expecting higher recidivism among African-American individuals.**\n\n::: {#13f5813e .cell execution_count=29}\n``` {.python .cell-code}\n# Identifying African-American and Caucasian individuals in the test set\nafr_am = (X_test[:, 2] == 0)\nwhite = (X_test[:, 2] == 1)\n\n# Predictions for African-American and Caucasian individuals\npred_afr_am = y_pred[afr_am]\npred_white = y_pred[white]\n\n# Calculating ratios\nafr_am_to_whites_ratio = afr_am.sum() / white.sum()\npredicted_reoffense_afr_am_to_whites_ratio = pred_afr_am.sum() / pred_white.sum()\n\n# Printing the ratios\nprint(\"Black to white prisoners ratio:\", round(afr_am_to_whites_ratio, 2))\nprint(\"Predicted reoffense blacks to whites ratio:\", round(predicted_reoffense_afr_am_to_whites_ratio, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBlack to white prisoners ratio: 1.51\nPredicted reoffense blacks to whites ratio: 2.15\n```\n:::\n:::\n\n\n### 3.3.1 Using Disparate Impact Repairing (preprocessing)\n\n**Disparate Impact** is a fairness metric used to assess the equality of outcomes between two distinct groups: an unprivileged group and a privileged group. It **measures the ratio of the proportion of individuals receiving favorable outcomes in the unprivileged group to that in the privileged group.**\n\n**Disparate impact remover** is a **preprocessing technique that edits feature values to increase group fairness** while preserving rank-ordering within groups\n\n$$\n\\frac{\\Pr(Y=1|D=\\text{unprivileged})}{\\Pr(Y=1|D=\\text{privileged})}\n$$\n\n<br>\n\nTo use the remover, let's first create two dataframes, one for the privileged group (\"Caucasian\") and one for the unprivileged group (\"African-American\"). Next, we want to plot the distribution of outcomes for each of the two groups and visually see this disparity:\n\n<br>\n\n::: {#eded0f69 .cell execution_count=30}\n``` {.python .cell-code code-fold=\"true\"}\n# Filter the DataFrame into privileged and unprivileged groups\nunprivileged = df_compas_bias_w[df_compas_bias_w['race'] == 0]\nprivileged = df_compas_bias_w[df_compas_bias_w['race'] == 1]\n\n# Set up the matplotlib figure\nplt.figure(figsize=(10, 6))\n\n# Plot the distribution for the unprivileged group\nsns.distplot(unprivileged['two_year_recid'], hist=False, label='Unprivileged (African-American)')\n\n# Plot the distribution for the privileged group\nsns.distplot(privileged['two_year_recid'], hist=False, label='Privileged (Caucasian)')\n\n# Add title and labels\nplt.title('Distribution of Outcomes for Privileged and Unprivileged Groups')\nplt.xlabel('Outcome (two_year_recid)')\nplt.ylabel('Density')\n\n# Show the plot\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-31-output-1.png){width=839 height=554}\n:::\n:::\n\n\n<br>\n\nNext, we are creating a StandardDataset object using the AIF360 library, which is designed for fairness-aware machine learningand can be then used with various algorithms and metrics provided by AIF360 to assess and mitigate bias in machine learning models.\n\n<br>\n\n::: {#02d2ca7a .cell execution_count=31}\n``` {.python .cell-code}\nprotected = 'race' #We chose race as the protected attribute because we are interested in the disparity between African-Americans and Caucasians\n\n# Create a StandardDataset object\ndf_protected = Dataset(df_compas_bias_w, #The dataset\n             label_name='two_year_recid', #The label or target variable that we want to predict\n             favorable_classes=[0], #The class we want to consider favorable (0 means no recidivism)\n             protected_attribute_names=[protected], #The attribute we want to test for disparity\n             privileged_classes=[[1]], categorical_features=[],   # 0 -> Black, 1 -> White to match the order of our dataset\n             features_to_keep=['race', 'priors_count', 'duration']) #The features we want to keep in the dataset because they are relevant for our model\n```\n:::\n\n\n<br>\n\n::: {#bbc11071 .cell execution_count=32}\n``` {.python .cell-code}\nscaler = MinMaxScaler(copy=False) #We create a scaler object\n\n# Splitting the dataset into test and train sets like we did before\ntest, train = df_protected.split([0.33], seed=42) #We use a seed to make sure we get the same split every time\n\n# Fitting the scaler on the training features and transforming the training features using the same scaler\ntrain.features = scaler.fit_transform(train.features) #We fit the scaler on the training features\n\n# Transforming the test features using the same scaler as the one fitted on the training features\ntest.features = scaler.transform(test.features) #We transform the test features using the same scaler\n\n# Getting the index of the protected attribute in the feature names list\nindex = train.feature_names.index(protected) #We get the index of the protected attribute in the feature names list\n```\n:::\n\n\n<br>\n\nThe **\"repair level\" parameter quantifies the extent to which you want to adjust the dataset to correct for disparities between privileged and unprivileged groups.**\n\nIn the follwoing code chunk, we calculate the disparate impact for both privileged (e.g., Caucasians) and unprivileged (e.g., African-Americans) groups, **storing the results in a list for each repair level.**\n\n<br>\n\n::: {#4cba75dd .cell execution_count=33}\n``` {.python .cell-code}\nnp.random.seed(42)\n\n\n# Initialize a list to store the disparate impact values\nDIs = []\n\n# Iterate over each level of repair\nfor level in tqdm(np.linspace(0., 1., 11)):\n    # Initialize DisparateImpactRemover with the current level\n    di = DisparateImpactRemover(repair_level=level) #We initialize the DisparateImpactRemover with the current level\n    # Fit and transform the training data\n    train_repd = di.fit_transform(train) #We fit and transform the training data\n    # Transform the test data (do not fit the test data)\n    test_repd = di.fit_transform(test) #We transform the test data (do not fit the test data)\n\n    # Remove the protected attribute before training the model\n    X_tr = np.delete(train_repd.features, index, axis=1) #We remove the protected attribute before training the model\n    X_te = np.delete(test_repd.features, index, axis=1) #We remove the protected attribute before training the model\n    y_tr = train_repd.labels.ravel() #We get the labels for the training set\n\n    # Initialize and fit the logistic regression model\n    lmod = LogisticRegression(class_weight='balanced', solver='liblinear') #We initialize and fit the logistic regression model with class_weight='balanced' to account for the imbalance in the dataset\n    lmod.fit(X_tr, y_tr) #We fit the model\n\n    # Predict on the test set and copy the results to a new dataset\n    test_repd_pred = test_repd.copy() #We predict on the test set and copy the results to a new dataset\n    test_repd_pred.labels = lmod.predict(X_te) #We predict on the test set and copy the results to a new dataset\n\n    # Calculate and store the disparate impact\n    p = [{protected: 1}] #We calculate and store the disparate impact for the privileged group (in our case Caucasians)\n    u = [{protected: 0}] #We calculate and store the disparate impact for the unprivileged group (in our case African-Americans)\n    cm = BinaryLabelDatasetMetric(test_repd_pred, privileged_groups=p, unprivileged_groups=u) #We calculate and store the disparate impact for the privileged and unprivileged groups\n    DIs.append(cm.disparate_impact()) #We calculate and store the disparate impact for the privileged and unprivileged groups\n\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r  0%|          | 0/11 [00:00<?, ?it/s]\r  9%|‚ñâ         | 1/11 [00:00<00:03,  3.21it/s]\r 27%|‚ñà‚ñà‚ñã       | 3/11 [00:00<00:01,  7.90it/s]\r 45%|‚ñà‚ñà‚ñà‚ñà‚ñå     | 5/11 [00:00<00:00,  8.15it/s]\r 64%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñé   | 7/11 [00:00<00:00, 10.57it/s]\r 82%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñè | 9/11 [00:00<00:00, 12.71it/s]\r100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 11/11 [00:00<00:00, 11.19it/s]\n```\n:::\n:::\n\n\n<br>\n\nThe graph we'll create next illustrates the efficacy of the Disparate Impact Remover at different repair levels for reducing racial bias within the context of predicting two-year recidivism. As the repair level increases from 0 (no adjustment) to 1 (full adjustment), the disparate impact metric approaches 1.0, which signifies fair treatment between races; each blue dot is a data point that shows how the fairness of the model, as measured by the disparate impact, changes as we apply different levels of bias mitigation.\n\nInitially, **with no repair, the metric is close to 0.8, indicating substantial bias against the unprivileged group (likely African-Americans). With full repair, the bias is reduced, but not entirely eliminated**, suggesting some residual unfairness remains or that the repair cannot fully compensate for the existing disparities within the data. The graph underscores the challenge of achieving complete fairness, as represented by the elusive ideal disparate impact value of 1.0, even as efforts are made to correct for bias in predictive modeling for criminal justice.\n\n<br>\n\n::: {#dfff2fdb .cell execution_count=34}\n``` {.python .cell-code code-fold=\"true\"}\n# Assuming DIs is your list of disparate impact values\nrepair_levels = np.linspace(0., 1., 11)\n\n# Assuming DIs is defined before this point\nDIs = DIs[:11]\n\nplt.figure(figsize=(10, 6))\nplt.plot(repair_levels, DIs, marker='o', markersize=8, linewidth=2, label='Disparate Impact')\n\nplt.title('Disparate Impact vs. Repair Level', fontsize=14)\nplt.xlabel('Repair Level', fontsize=12)\nplt.ylabel('Disparate Impact', fontsize=12)\n\nplt.axhline(y=1.0, color='g', linestyle='--', label='Ideal Value')\nplt.plot([0, 1], [0.8, 0.8], 'r', linestyle='-.', label='Threshold')\n\nplt.grid(True)\nplt.legend()\nplt.tight_layout()\n\n# Display the plot\nplt.show()\n\n```\n:::\n\n\n<br>\n\n::: {#fee0a088 .cell execution_count=35}\n``` {.python .cell-code code-fold=\"true\"}\n# Predict on test using only the features at indices -3 and -1\ny_pred = lmod.predict(X_test[:, [-3, -1]])\n\n# Boolean masks for African-American and Caucasian individuals\nafr_am_mask = (X_test[:, 2] == 0)\nwhite_mask = (X_test[:, 2] == 1)\n\n# Predictions for African-American and Caucasian individuals\npred_afr_am = y_pred[afr_am_mask]\npred_white = y_pred[white_mask]\n\n# Calculating the ratio of predicted reoffenses\npredicted_reoffense_afr_am_to_whites_ratio = pred_afr_am.sum() / pred_white.sum()\n\n# Printing the predicted reoffense ratio\nprint(\"Predicted reoffense blacks to whites ratio:\", np.round(predicted_reoffense_afr_am_to_whites_ratio, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPredicted reoffense blacks to whites ratio: 2.07\n```\n:::\n:::\n\n\n<br>\n\nAnd good news: The Ratio dropped from 2.15 to 2.07! So, reparation has worked, we have a less biased result. But, let's be honest, this is not a huge improvement, there still seems to be a decent amount of bias. So, let's try out some other techniques to improve the fairness of the model even further!\n\n## 3.3.2 Reweighting the Data (Preprocessing)\n\nFirst, let's have a look at the difference in mean outcomes metric of the AIF360 library for unprivileged and privileged groups. A positive value indicates a bias in favor of the privileged group, while a negative value indicates a bias against the unprivileged group. In our case, the latter is the case, with a difference in mean outcomes of -0.126\n\n::: {#370f315e .cell execution_count=36}\n``` {.python .cell-code code-fold=\"true\"}\nfrom aif360.metrics import BinaryLabelDatasetMetric\n\n# Define unprivileged and privileged groups.\n\nprivileged_groups = [{'race': 1}]\nunprivileged_groups = [{'race': 0}]\n\n\n# Initialize the metric for the original training dataset\nmetric_orig_train = BinaryLabelDatasetMetric(train, # train from protected dataset\n                                             unprivileged_groups=unprivileged_groups, # Consideres to be at disadvantage (e.g., Blacks)\n                                             privileged_groups=privileged_groups) # Considered to be at an advantage (e.g., Caucasians)\n\n# Print the difference in mean outcomes between unprivileged and privileged groups\nmean_diff = metric_orig_train.mean_difference() # difference in probabilities of favorable outcomes between the privileged and unprivileged groups.\n#A positive value indicates a bias in favor of the privileged group, while a negative value indicates a bias against the unprivileged group.\nprint(\"Difference in mean outcomes between blacks and whites = %f\" % mean_diff)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDifference in mean outcomes between blacks and whites = -0.125928\n```\n:::\n:::\n\n\n<br>\n\n\nNext, we apply a second mitigation strategy by **performing reweighing on the training dataset** to ensure that the total sum of instance weights for the transformed training dataset (transf_train.instance_weights.sum()) is approximately equal to the total sum of instance weights for the original training dataset (train.instance_weights.sum()). The check is done using an absolute difference and comparing it against a small number, 1e-6, to account for any minor floating-point arithmetic discrepancies.\n\nThe result \"True\" indicates that the reweighing algorithm is functioning as intended in this regard: it's **modifying individual instance weights to address disparities without changing the overall weight sum.** This is important to ensure that the dataset's overall statistical properties remain consistent while individual instances are weighted differently to mitigate bias.\n\n::: {#c26f0308 .cell execution_count=37}\n``` {.python .cell-code}\nRW = Reweighing(unprivileged_groups=unprivileged_groups,\n               privileged_groups=privileged_groups)\nRW.fit(train)\ntransf_train = RW.transform(train)\n```\n:::\n\n\n::: {#bea1c8cb .cell execution_count=38}\n``` {.python .cell-code}\n### Testing\nnp.abs(transf_train.instance_weights.sum()-train.instance_weights.sum())<1e-6\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\nTrue\n```\n:::\n:::\n\n\n<br>\n\n::: {#2fef92ff .cell execution_count=39}\n``` {.python .cell-code code-fold=\"true\"}\nmetric_orig_train = BinaryLabelDatasetMetric(train,\n                                             unprivileged_groups=unprivileged_groups,\n                                             privileged_groups=privileged_groups)\norig_mean_difference = metric_orig_train.mean_difference()\n\n\nmetric_transf_train = BinaryLabelDatasetMetric(transf_train,\n                                               unprivileged_groups=unprivileged_groups,\n                                               privileged_groups=privileged_groups)\ntransf_mean_difference = metric_transf_train.mean_difference()\n\nprint(\"Difference in mean outcomes between transformed blacks and whites = %f\" % metric_transf_train.mean_difference())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDifference in mean outcomes between transformed blacks and whites = -0.000000\n```\n:::\n:::\n\n\n<br>\n\nThe following plot shows that the transformation of the data does not change the overall statistic properties - the distribution of features stays the same after the transformation.\n\n<br>\n\n::: {#7ff900cd .cell execution_count=40}\n``` {.python .cell-code code-fold=\"true\"}\noriginal_labels = train.labels.ravel()\ntransformed_labels = transf_train.labels.ravel()\n\noriginal_feature = train.features[:, train.feature_names.index('priors_count')]\ntransformed_feature = transf_train.features[:, transf_train.feature_names.index('priors_count')]\n\n# Plotting distributions\nfig, axes = plt.subplots(2, 2, figsize=(12, 10))\n\n# Plot distribution of labels\nsns.histplot(original_labels, ax=axes[0, 0], color=\"blue\", kde=True, stat=\"density\", linewidth=0)\naxes[0, 0].set_title('Original Labels')\nsns.histplot(transformed_labels, ax=axes[0, 1], color=\"green\", kde=True, stat=\"density\", linewidth=0)\naxes[0, 1].set_title('Transformed Labels')\n\n# Plot distribution of a key feature\nsns.histplot(original_feature, ax=axes[1, 0], color=\"blue\", kde=True, stat=\"density\", linewidth=0)\naxes[1, 0].set_title('Original Feature Distribution')\nsns.histplot(transformed_feature, ax=axes[1, 1], color=\"green\", kde=True, stat=\"density\", linewidth=0)\naxes[1, 1].set_title('Transformed Feature Distribution')\n\nplt.tight_layout()\nplt.show()\n```\n:::\n\n\n<br>\n\n## Train Logistic Regression with reweighed dataset\n\nNow, **let's see, if we can train a fairer model, using this preprocessing technique** of reweighting - promising to make our results less bias. First, we neet to train with the tranformed data and then predict our outcome on the transformed test dataset.\n\n::: {#8089fc18 .cell execution_count=41}\n``` {.python .cell-code}\nscale_transf = StandardScaler()\nX_reweighed_train = scale_transf.fit_transform(transf_train.features)\ny_reweighed_train = transf_train.labels.ravel()\n\nlmod = LogisticRegression()\nlmod.fit(X_reweighed_train, y_reweighed_train,\n        sample_weight=transf_train.instance_weights)\ny_train_pred = lmod.predict(X_reweighed_train)\n\ntransf_test = RW.transform(test)\n\nscale_transf = StandardScaler()\nX_reweighed_test = scale_transf.fit_transform(transf_test.features)\ny_reweighed_test = transf_test.labels.ravel()\n\n# Predict on test\ny_pred = lmod.predict(X_reweighed_test)\nX_test\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\narray([[0.        , 0.        , 0.        , ..., 0.02631579, 1.        ,\n        0.40499307],\n       [0.        , 0.5       , 1.        , ..., 0.        , 1.        ,\n        0.82385576],\n       [0.        , 1.        , 0.        , ..., 0.26315789, 1.        ,\n        0.24479889],\n       ...,\n       [0.        , 0.5       , 0.        , ..., 0.05263158, 1.        ,\n        0.18862691],\n       [0.        , 0.        , 0.        , ..., 0.        , 1.        ,\n        0.93273232],\n       [1.        , 0.5       , 0.        , ..., 0.42105263, 1.        ,\n        0.60679612]])\n```\n:::\n:::\n\n\n<br>\n\nWe want to print the calculated ratios, providing insights into the relative proportions of African-American to Caucasian individuals and the predicted reoffense ratios based on the model's predictions on the transformed data, as we did for the original data in the beginning. And wohoo! The **predictions are now closer to the ratio, meaning that our prediction got less biased.** And: we didn't have to sacrifice accuracy for that!\n\n<br>\n\n::: {#7e2905eb .cell execution_count=42}\n``` {.python .cell-code code-fold=\"true\"}\n# Create boolean masks for African-American and Caucasian groups\n# Make sure these masks are created from the dataset used for the predictions\nafr_am_mask = (transf_test.features[:, 0] == 0)\nwhite_mask = (transf_test.features[:, 0] == 1)\n\n# Apply the masks to the predictions\npred_afr_am = y_pred[afr_am_mask]\npred_white = y_pred[white_mask]\n\n# Calculate the Black to White Prisoners Ratio\n# Count of African-American individuals divided by count of Caucasian individuals\nratio_afr_am_white = np.sum(afr_am_mask) / np.sum(white_mask)\n\n# Calculate the Predicted Reoffense Ratio for Blacks to Whites\n# Sum of predicted reoffenses for African-Americans divided by sum for Caucasians\nratio_pred_reoffense = np.sum(pred_afr_am == 1) / np.sum(pred_white == 1)\n\nprint(\"Black to white prisoners ratio:\", np.round(ratio_afr_am_white, 2))\nprint(\"Predicted reoffense blacks to whites ratio:\", np.round(ratio_pred_reoffense, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBlack to white prisoners ratio: 1.5\nPredicted reoffense blacks to whites ratio: 1.85\n```\n:::\n:::\n\n\n::: {#f4150773 .cell execution_count=43}\n``` {.python .cell-code code-fold=\"true\"}\ny_pred = lmod.predict(X_reweighed_test)\n\nacc = np.sum(y_pred == y_reweighed_test) / len(y_reweighed_test)\nprint(\"Accuracy =\", np.round(acc, 3))\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAccuracy = 0.875\n```\n:::\n:::\n\n\n::: {#d019c71c .cell execution_count=44}\n``` {.python .cell-code}\nprivileged_groups_new = [{protected: 1}]\nunprivileged_groups_new = [{protected: 0}]\n\n\ncm = BinaryLabelDatasetMetric(transf_test.copy(), #\n                              privileged_groups=privileged_groups_new,\n                              unprivileged_groups=unprivileged_groups_new)\n\nDIs.append(cm.disparate_impact())\n```\n:::\n\n\n<br>\n\nWhen we apply the reweighted dataset to train a model and subsequently calculate fairness metrics like Disparate Impact (DI), we typically expect the DI values to move towards 1, signaling reduced bias. The marked increase in DI at this full repair level indicates that the algorithm has substantially adjusted the instance weights, aiming to correct for disparities.\n\n<br>\n\n::: {#276a779c .cell execution_count=45}\n``` {.python .cell-code code-fold=\"true\"}\n# Assuming DIs is your list of disparate impact values with the appropriate length\nplt.figure(figsize=(8, 5))\n\n# Plot with increased marker size and line width\nplt.plot(np.linspace(0, 1, 12), DIs, marker='o', markersize=8, linewidth=2, label='Disparate Impact')\n\n# Green line for the ideal value of DI = 1\nplt.plot([0, 1], [1, 1], 'g', linestyle='--', label='Ideal Value')\n\n# Red line for threshold\nplt.plot([0, 1], [0.8, 0.8], 'r', linestyle='-.', label='Threshold')\n\nplt.ylim([0.7, 1.1])\n\n# Setting font size for labels and title\nplt.ylabel('Disparate Impact (DI)', fontsize=16)\nplt.xlabel('Repair Level', fontsize=16)\n\n# Adding grid, legend, and tight layout\nplt.grid(True)\nplt.legend()\nplt.tight_layout()\n\n\n# Show the plot\nplt.show()\n```\n:::\n\n\n## Post-processing Mitigation Strategy\n\n### Reject Option Classification\n\nLast but not least we want to present a post-processing strategy to mitigate bias. The goal of Reject Option Classification is to improve the fairness of predictions made by a classifier. Let's give you an overview of this technique:\n\n- **Classifier Prediction**: First, you have a classifier that has been trained on your dataset and makes predictions about new instances.\n\n- **Confidence Interval**: **Reject Option Classification operates on a confidence interval around the decision boundary of the classifier.** This is where the classifier's certainty about its predictions is lower.\n\n- **Protected Attribute**: It uses a protected attribute (in our case: race) to determine where bias might be present in these uncertain predictions.\n\n- **Favorable Outcomes**: For instances within the confidence interval, if they belong to the unprivileged group, the algorithm can change an unfavorable outcome to a favorable one. Conversely, for the privileged group, it can change a favorable outcome to an unfavorable one.\n\n- **Fairness Enhancement**: The idea is to **\"reject\" the initial decision (hence the name) in favor of one that will lead to a more balanced distribution** of positive outcomes between the privileged and unprivileged groups.\n\n- **Balancing Performance and Fairness**: This method aims to balance the overall performance of the classifier (in terms of accuracy, precision, etc.) with fairness considerations. It seeks to ensure that the positive predictive value (the probability that subjects with a positive screening test truly have the disease) is similar across groups.\n\n::: {#d8c02440 .cell execution_count=46}\n``` {.python .cell-code}\n#Identifying the Favorable Outcome Index\npos_ind = np.where(lmod.classes_ == transf_train.favorable_label)[0][0] #We identify the favorable outcome index\n\n#Fit the scaler on the training data and transform the training features\nscale_transf = StandardScaler() #We fit the scaler on the training data and transform the training features\nX_reweighed_train = scale_transf.fit_transform(transf_train.features) #We fit the scaler on the training data and transform the training features\n\n#Transform the test features using the same scaler\nX_reweighed_test = scale_transf.transform(transf_test.features) #We transform the test features using the same scaler\n\n#Copy the datasets\ntransf_train_post = transf_train.copy() #We copy the datasets\ntransf_test_post = transf_test.copy() #We copy the datasets\n\n#Predict probabilities and assign scores for the training and test sets\ntransf_train_post.scores = lmod.predict_proba(X_reweighed_train)[:, pos_ind].reshape(-1, 1) #We predict probabilities and assign scores for the training and test sets\ntransf_test_post.scores = lmod.predict_proba(X_reweighed_test)[:, pos_ind].reshape(-1, 1) #We predict probabilities and assign scores for the training and test sets\n```\n:::\n\n\n::: {#59c64f08 .cell execution_count=47}\n``` {.python .cell-code}\nmetric_ub = 0.05 #We set the upper bound for the metric\nmetric_lb = -0.05 #We set the lower bound for the metric\n\nROC = RejectOptionClassification(unprivileged_groups=unprivileged_groups, #We set the upper bound for the metric\n                                 privileged_groups=privileged_groups, #We set the lower bound for the metric\n                                 low_class_thresh=0.01, #Range of decision thresholds to consider for potential adjustment.\n                                 high_class_thresh=0.99, #Range of decision thresholds to consider for potential adjustment.\n                                  num_class_thresh=100, #Number of decision thresholds to be considered within the specified range\n                                  num_ROC_margin=50, #Number of margins to be examined around the decision threshold where ROC will adjust the classifier's predictions.\n                                  metric_name= 'Statistical parity difference', #Metric used to measure fairness for determining thresholds\n                                  metric_ub=metric_ub, metric_lb=metric_lb) #Upper and lower bound for the fairness metric used to determine thresholds\n\nROC = ROC.fit(transf_test, transf_test_post)\n\n```\n:::\n\n\nThe technique learns how to adjust the decision thresholds based on the scores and labels in transf_test_post such that the fairness metric (Statistical parity difference in this case) falls between the bounds specified earlier (metric_ub and metric_lb). The dataset transf_test is used as a reference for the original decision making, which transf_test_post presumably improves upon.\n\n::: {#d32266f9 .cell execution_count=48}\n``` {.python .cell-code code-fold=\"true\"}\nprint(\"Optimal classification threshold (with fairness constraints) = %.4f\" % ROC.classification_threshold)\nprint(\"Optimal ROC margin = %.4f\" % ROC.ROC_margin)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOptimal classification threshold (with fairness constraints) = 0.8217\nOptimal ROC margin = 0.0146\n```\n:::\n:::\n\n\nROC algorithm has identified 0.8217 as the decision threshold that best balances the classifier's performance with the fairness constraints that were set. Optimal ROC margin = 0.0146. This margin is where the algorithm is most active in adjusting predictions to improve fairness. if an instance belonging to the unprivileged group has a score slightly below the threshold, it might be pushed above the threshold to receive a favorable outcome. Conversely, an instance from the privileged group with a score just above the threshold might be pulled below it to receive an unfavorable outcome. the Algorithm has found a way to adjust the classifier's predictions to conform to the fairness constraints without excessively compromising its predictive performance\n\nThe purpose of this function is to evaluate the performance of a classification model from both a standard accuracy perspective and a fairness perspective.\n\n::: {#a9ef94ff .cell execution_count=49}\n``` {.python .cell-code}\ndef compute_metrics(dataset_true, dataset_pred,\n                    unprivileged_groups, privileged_groups,\n                    disp=True):\n    \"\"\" Compute the key metrics \"\"\"\n    classified_metric_pred = ClassificationMetric(dataset_true, dataset_pred,\n                                                  unprivileged_groups=unprivileged_groups,\n                                                  privileged_groups=privileged_groups)\n    # Initialize an empty OrderedDict\n    # Compute all required metrics at once\n    metrics = OrderedDict([\n        (\"Balanced accuracy\", 0.5 * (classified_metric_pred.true_positive_rate() +\n                                     classified_metric_pred.true_negative_rate())),\n        (\"Statistical parity difference\", classified_metric_pred.statistical_parity_difference()),\n        (\"Disparate impact\", classified_metric_pred.disparate_impact()),\n        (\"Average odds difference\", classified_metric_pred.average_odds_difference()),\n        (\"Equal opportunity difference\", classified_metric_pred.equal_opportunity_difference()),\n        (\"Theil index\", classified_metric_pred.theil_index())\n    ])\n\n    if disp:\n        # Display metrics in a formatted way\n        for metric_name, metric_value in metrics.items():\n            print(f\"{metric_name} = {metric_value:.4f}\")\n\n    return metrics\n```\n:::\n\n\n::: {#7cc84bba .cell execution_count=50}\n``` {.python .cell-code}\n# Metrics for the transformed test set\ndataset_transf_test_post = ROC.predict(transf_test_post)\n\nmetric_test_aft = compute_metrics(transf_test, dataset_transf_test_post,\n                unprivileged_groups, privileged_groups)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBalanced accuracy = 0.8963\nStatistical parity difference = -0.0066\nDisparate impact = 0.9852\nAverage odds difference = -0.0173\nEqual opportunity difference = -0.0381\nTheil index = 0.1148\n```\n:::\n:::\n\n\nUsing this technique, we get very nice results for both: Our model's performance and its fairness measures.\n\n**Balanced Accuracy (0.8963)** :\n\nGood overall accuracy of the model. Balanced accuracy takes into account both the true positive rate and true negative rate.\n\n**Statistical Parity Difference (-0.0066)**\n\n It indicates that the probability of a positive outcome (favorable prediction) is nearly equal for both privileged and unprivileged groups\n\n **Disparate Impact (0.9852)**\n\nA value close to 1 indicates fair treatment between the groups. Specifically, a value of 1 would imply perfect fairness. The model's predictions do not disproportionately favor one group over the other\n\n**Average Odds Difference (-0.0173)**\n\nEquality of odds between unprivileged and privileged groups. A value of 0 would mean perfect equality. The value -0.0173 indicates a small bias against the unprivileged group in terms of false positive and true positive rates, but this bias is relatively minor now.\n\n**Equal Opportunity Difference (-0.0381)**\n\nTrue positive rates between groups. A value of 0 represents equal opportunity. The value -0.0381 suggests a slight bias against the unprivileged group in terms of having true positives or favorable outcomes.\n\n**Theil Index (0.1148)**\n\nTheil index is a measure of inequality. A value of 0 indicates perfect equality, while higher values show greater inequality. A value of 0.1148 indicates some inequality in the model's predictions, but it's not excessively high\n\n## Results and Discussion\n\nThe tutorial introduced how to detect bias and helps the user to replicate a biased CNN in order to understand that bias is something, you always have to keep in mind when training your model.\n\nIn the last and most central part of the tutorial we introduced different approaches to mitigate bias. To conclude, we can state that **we successfully debiased the data**, as the last list of performance and fairness metric demonstrates. Beginning with relatively high bias, we applied\n- first, we used the **disparate impact remover, showing some, but not an exceptional improvement** in bias metrics.\n- We could reach a better result, applying our second preprocessing strategy, namely **reweighting our data** before training our model with it.\n- Last but not least, we applied a post processing technique, **Reject Option Classification, that also lead to good results, debiasing our data.**\n\nAll of these steps demonstrate that there are **different strategies for each part of our data and model pipeline **to adress bias and find strategies to come to fairer results.\n\n\n## Limitations\n\nThe greatest limitation of this tutorial potentially comes from the chosen data source: The COMPAS data already comes in a quite tidy format and previous analyses already identified the most pressing issues of the data set. When applying the detection and mitigation techniques demonstrated in this tutorial, **students and researcher should be aware that alternative data sets need to be carefully cleaned**before calculating bias metrices and applying mitigation strategies.\n\nMoreover, this tutorial focuses on one specific data input type. When **other data types** are considered (e.g. image, video, or time-series), detection and mitigation strategies potentially need to be adapted.\n\nAs introduced in the tutorial memo, **there are numerous distinct types of biases** that can occur in the machine/deep learning pipeline. This tutorial focused on biased data, especially on representation bias. Applied to different data sets, students and researchers should also check for other types of bias (e.g. measurement bias). Additionally, not only the data should be tested for bias, but also implemented models and model evaluating should be critically exmined.\n\n## Next Steps\n\n\nThis tutorial serves as a first introduction to the topic of bias and fairness - we hope that it gave a good overview of the related issues and possible solutions to tackle them. As next steps we propose that users of the tutorial look for **another dataset and try to apply the newly acquired tools** (unfortuately it is not a challenge to find biased datasets on Kaggle or other online platforms).\n\nTo dig deeper in the deep learning application it could be interesting to check out the topic of bias and fairness in other data types like images and text data. It would have exceeded the scope of our tutorial but there are very interesting approaches of bias mitigation in Natural Language Processing, for example the approach of text pertubation to train fairer models (https://ai.meta.com/blog/measure-fairness-and-mitigate-ai-bias/). **For policy application, text data is very important  thus we can only recommend the users to get familiar with such techniques.**\n\nTo conclude, **we know that we could only show a very small part of bias detection and mitigation strategies** - so we don't expect the users to be experts for this area coming out of this tutorial. **More importantly we hope that we might have shifted the user's view on the importance of bias related issues**. This could be a first step to raise awareness for his crucial part of machine and deep learning - which so far is too often ommitted or neglected.\n\n------------------------------------------------------------------------\n\n# References\n\n------------------------------------------------------------------------\n\n\n::: {.callout-tip}\n## References\n\n- Regean, Mary. 2021. \"Understanding bias and fairness in AI system\". [URL](https://towardsdatascience.com/understanding-bias-and-fairness-in-aisystems-6f7fbfe267f3)\n\n- Anaconda, 2021 State of Data Science Report. [URL](https://know.anaconda.com/rs/387-XNW-688/images/Anaconda-2021-SODS-Report-Final.pdf)\n\n- Clark, Andrew. September 19, 2022. \"Top bias metrics and how they work\". Monitaur. [URL](https://www.monitaur.ai/blog-posts/top-bias-metricsand-how-they-work)\n\n- Feldman et al. ‚ÄûCertifying and Removing Disparate Impact‚Äú. Proceedings of the 21th ACM SIGKDD International Conference on KnowledgeDiscovery and Data Mining, ACM, 2015, S. 259‚Äì68. DOI.org (Crossref), [URL](https://doi.org/10.1145/2783258.2783311).\n\n- Towards datascience, \"AI Fairness ‚Äî Explanation of Disparate Impact Remover\". [URL](https://towardsdatascience.com/ai-fairness-explanation-of-disparate-impact-remover-ce0da59451f1)\n\n- Lee, Nicol Turner, Paul Resnick, and Genie Barton. \"Algorithmic bias detection and mitigation: Best practices and policies to reduce consumer harms.\" Brookings Institute: Washington, DC, USA 2 (2019)\n:::\n\n::: callout-note\nCite this page: Roa, J. (2023, April 16). *Understanding R Objects: Data Structures and Classes in R*. /. [URL](https://www.hertiecodingclub.com/learn/rstudio/rstudio101/)\n:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}