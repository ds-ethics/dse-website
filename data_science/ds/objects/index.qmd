---
title:  '{{< animate fadeInDown "Bias in AI: detection and mitigation"delay=.6s >}}'
subtitle: '{{< animate fadeInDown "Enable users to detect and mitigate bias, using the example of the COMPAS Recidivism Risk Score Data and Analysis Dataset. Users will be equiped with concrete strategies to first detect, and secondly mitigate bias"delay=.6s >}}'
author: ["Jorge Roa", "Carlo Gre√ü", "Hannah Schweren"]
date: "2023-12-05"
categories: ["Advanced", "Bias in AI", "Mitigation"]
toc: true
draft: false
code-link: true
code-copy: true
title-block-banner: true
comments: false
image: images/dalle.png
include-in-header: meta.html 
format: html
filters:
   - lightbox
   - webr
lightbox: 
  match: auto
  effect: fade
  desc-position: left
  css-class: "lightwidth"
webr:
  packages: ['ggplot2', 'dplyr']
  show-startup-message: false
  show-header-message: false
jupyter: python3
---

<br>

# Introduction

This notebook offers a detailed guide that includes both code and explanations aimed at enabling users to identify and counteract bias within data, specifically using the COMPAS Recidivism Risk Score Data and Analysis Dataset as a case study. It provides users with practical strategies to first detect and then mitigate bias, laying a foundational approach for handling biases effectively in algorithmic processes. The tutorial is designed as an introductory step towards fostering an understanding of the biases that can infiltrate algorithms and promoting the development of ethical AI practices. This is particularly critical in contexts where algorithmic decisions intersect with policy-making, potentially influencing societal outcomes. Through this guide, users will not only learn to recognize biases but also implement measures to address these biases, thereby enhancing the fairness and integrity of AI systems in public and private sectors.

<br>

# Overview

The COMPAS dataset, used by an algorithm predicting recidivism risk, has become a key example in the study of algorithmic bias and fairness. It includes demographic and criminal history data. Analyses revealed racial disparities in risk assessments, with the algorithm tending to overestimate recidivism risk for Black defendants and underestimate it for White defendants.

This tutorial is divided into three parts:

1.- *Introduction to Bias Detection Metrics*: We will introduce different metrics to detect bias, providing a smooth introduction to the topic and helping users gain a better understanding of the issue.

2.- *Replication of Biased Output with a Feed Forward Neural Network*: In this step, we will replicate the biased output using a Feed Forward Neural Network. This hands-on exercise will provide users with practical experience in generating predictions and raise awarness for the biased output.

3.*-Mitigation of Detected Bias*: The grand finale and most important part of our tutorial! Users will learn effective strategies to mitigate the detected bias. This step is crucial for ethical deep learning, and the tutorial aims to equip users with essential skills dealing with biased results.

By completing this tutorial, users will acquire valuable skills for future data endeavors. It serves as a foundational step to train users and raise awareness of fairness issues in Deep Learning. 

<br>


## Background and Prerequisites

This tutorial is designed for users with a basic understanding of Python and Deep Learning. Users should have a foundational understanding of key concepts in machine learning and neural networks. Familiarity with Python is essential. Additionally, a grasp of linear algebra and calculus will be beneficial for understanding the mathematical underpinnings of deep learning algorithms.

- A solid understanding of model training is crucial, as well as knowledge of common machine learning libraries such as   `Keras` and `scikit-learn`. Users should also be aware of the ethical and policy considerations surrounding machine learning applications, particularly in relation to bias and fairness.

- Lastly, a conceptual understanding of how neural networks operate, including layers, activation functions, and backpropagation, will enhance the learning experience of the user. Overall, a basic background in machine learning fundamentals will help users to engage more effectively with our tutorial.

```{python packages}
#| message: false
#| warning: false
#| output: false


!pip install pandas numpy matplotlib
!pip install Aequitas
!pip install keras_tuner
!pip install aif360
!pip install BlackBoxAuditing
!pip install tensorflow
```

```{python libraries}
#| message: false
#| warning: false


# Data visualization
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(style="white", palette="muted", color_codes=True, context="talk")
from IPython import display

# Data manipulation
import pandas as pd
import numpy as np
from tqdm import tqdm

# Aequitas library used to audit models for discrimination and bias
from aequitas.group import Group
from aequitas.bias import Bias
from aequitas.fairness import Fairness
from aequitas.plotting import Plot
import matplotlib.pyplot as plt
import warnings; warnings.simplefilter('ignore')

# Machine and deep learning libraries
import tensorflow as tf
from keras.layers import Input, Dense, Dropout
from keras.models import Model
from keras.optimizers import Adam
import keras_tuner as kt
from keras import Input, Model
from keras.layers import Dense, Dropout
from keras.optimizers import Adam
from sklearn.utils.class_weight import compute_class_weight
from sklearn.metrics import accuracy_score, roc_auc_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import precision_score, recall_score, f1_score, confusion_matrix

# AI fairness library
from aif360.algorithms.preprocessing import DisparateImpactRemover
from aif360.datasets import StandardDataset as Dataset
from aif360.metrics import BinaryLabelDatasetMetric
from aif360.algorithms.postprocessing.reject_option_classification import RejectOptionClassification
from aif360.algorithms.preprocessing.reweighing import Reweighing
from collections import OrderedDict
from aif360.metrics import ClassificationMetric

```

# Data Description

In this tutorial we are working with the COMPAS Recidivism Risk Score Data and Analysis (Source: Pro Publica, https://www.propublica.org/datastore/dataset/compas-recidivism-risk-score-data-and-analysis) This dataset is a classical example for bias in machine learning. We specifically liked using this dataset as an example because it reveils the possible harmfull negative impact on real world decisions, that algorithms can have and the resulting policy responsibility.

The tabular dataset is used in U.S. court proceedings to evaluate the probability of a defendant reoffending. It is available in csv format for free and contains the following information (Source: https://mlr3fairness.mlr-org.com/reference/compas.html#pre-processing) :

-  (integer) **age** : The age of defendants.

-  (factor) **c_charge_degree** : The charge degree of defendants. F: Felony M: Misdemeanor

- (factor) **race**: The race of defendants.

- (factor) **age_cat**: The age category of defendants.

- (factor) **score_text**: The score category of defendants.

- (factor) **sex**: The sex of defendants.

- (integer) **priors_count**: The prior criminal records of defendants.

- (integer) **days_b_screening_arrest**: The count of days between screening date and (original) arrest date. If they are too far apart, that may - indicate an error. If the value is negative, that indicate the screening date happened before the arrest date.

- (integer) **decile_score**: Indicate the risk of recidivism (Min=1, Max=10)

- (integer) **is_recid**: Binary variable indicate whether defendant is rearrested at any time.

- (factor) **two_year_recid**: Binary variable indicate whether defendant is rearrested at within two years.

- (numeric) **length_of_stay**: The count of days stay in jail.

In the course of the tutorial, we'll also work with a version of the COMPAS data, that was processed to work well with the aequitas package - this version of the dataset can be found in this Github repository: https://github.com/dssg/aequitas/tree/master/examples/data. Here, only a subset of the variables is considered, but it includes all important variables for demonstrating the package's benefits. It includes:

- (integer) **entity_id**: ID variable

- (integer) **score**: Risk score of defendants, binary

- (factor) **label_value**: Binary variable indicate whether defendant is rearrested

- (factor) *race*: The race of defendants.

- (factor) **sex**: The sex of defendants

- (factor) **age_cat**: The age category of defendants

<br>

# Part 1: Data Exploration and Bias Detection

**Note that the first part of this tutorial is largely based on the documentation of the aequitas-library (https://dssg.github.io/aequitas/examples/compas_demo.html?highlight=xtab). Since the COMPAS data is a widely-known and commonly used data set for showing issues with biased data, the authors used it for demonstrating the library's core functions. Instead of linking the documentation, we decided to include the most important features of the library in the first part of our tutorial, partially adapting some code. More, we adjusted some codes in order to show the metrics that were most important to us for demonstrating bias in the compas data.**

<br>

For a first overview of the data, we load it directly from GitHub. Note that we use a version of the Compas data here that is explicitly well-suited for the Aequitas library, with a restricted number of columns and slightly deviating variable names. From printing the first 5 rows, we can retrieve that an ID variable, a (binary) risk score, a (binary) recidivism indicator, and three demographic variables (race, sex, age) are included.

```{python ssl}
#| output: false
#| echo: false

import ssl

ssl._create_default_https_context = ssl._create_stdlib_context

```


## 1.1 Data Download

```{python load_data}

# Load the data

df_compas_aeq = pd.read_csv("https://raw.githubusercontent.com/dssg/aequitas/master/examples/data/compas_for_aequitas.csv")
df_compas_aeq.head()

```

<br>

## Exploratory Data Visualization

### Distribution of Defendants by Demographics (Race, Age, Sex) and Risk Scores

<br>

As a first step, we are exploring the distribution of our defendant data with regards to demographic characteristics and the calculated risk scores. As we can see, African-Americans, Caucasians, males, and defendants aged 25-45 are the subgroups that are highly represented in the data. Additionally, we can already see from the plots that African-Americans and defendants aged under 25 are the only subgroups where the majority has been assigned a high risk score.

```{python plot}
#|code-fold: true
Reds_palette = sns.diverging_palette(204, 0, n=2)

# Create a figure with 3 subplots (3 rows, 1 column)
fig, axes = plt.subplots(3, 1, figsize=(8, 16))

# race
by_race = sns.countplot(
    ax=axes[0],
    x="race",
    hue="score",
    data=df_compas_aeq,
    palette=Reds_palette
)

axes[0].set_title("Distribution of Defendants by Race and Risk Score (Decile)")
axes[0].set_xlabel("Race")
axes[0].set_ylabel("Count")
axes[0].legend(loc='upper right', title='Risk Score Decile')
axes[0].grid(True, linestyle='--', linewidth=0.5)
axes[0].tick_params(axis='x', rotation=45)

# sex
by_sex = sns.countplot(
    ax=axes[1],
    x="sex",
    hue="score",
    data=df_compas_aeq,
    palette=Reds_palette
)

# Add title and labels
axes[1].set_title("Distribution of Defendants by Sex and Risk Score (Decile)")
axes[1].set_xlabel("Sex")
axes[1].set_ylabel("Count")

# sex
axes[1].legend(loc='upper right', title='Risk Score')
axes[1].grid(True, linestyle='--', linewidth=0.5)
axes[1].tick_params(axis='x', rotation=45)

# Create countplot for age
by_age = sns.countplot(
    ax=axes[2],
    x="age_cat",
    hue="score",
    data=df_compas_aeq,
    palette=Reds_palette
)

axes[2].set_title("Distribution of Defendants by Age and Risk Score (Decile)")
axes[2].set_xlabel("Age Category")
axes[2].set_ylabel("Count")

axes[2].legend(loc='upper right', title='Risk Score')

axes[2].grid(True, linestyle='--', linewidth=0.5)

axes[2].tick_params(axis='x', rotation=45)

plt.tight_layout()

plt.show()

```

<br>

## Distribution of Defendants by Demographics and Recidivism

Next, we are looking at the same demographic subgroups and whether the defendants actually committed crime again. We can already see, that there seems to be a mismatch between the assigned risk scores and the recidivism patterns.


```{python plot2}
#|code-fold: true

coolwarm_two_colors = sns.color_palette("coolwarm", n_colors=2)
coolwarm_palette = sns.color_palette("coolwarm", as_cmap=True)


# Create a figure with 3 subplots (3 rows, 1 column)
fig, axes = plt.subplots(3, 1, figsize=(8, 16))

# Create countplot for race
label_by_race = sns.countplot(
    ax=axes[0],
    x="race",
    hue="label_value",
    data=df_compas_aeq,
    palette=coolwarm_two_colors
)

# Add title and labels for race
axes[0].set_title("Levels of recidivism by Race")
axes[0].set_xlabel("Race")
axes[0].set_ylabel("Count")
axes[0].grid(True, linestyle='--', linewidth=0.5)
axes[0].legend(loc='upper right', title='Recidivism')
axes[0].tick_params(axis='x', rotation=45)

# Create countplot for sex
label_by_sex = sns.countplot(
    ax=axes[1],
    x="sex",
    hue="label_value",
    data=df_compas_aeq,
    palette=coolwarm_two_colors
)

# Add title and labels for sex
axes[1].set_title("Levels of recidivism by Sex")
axes[1].set_xlabel("Sex")
axes[1].set_ylabel("Count")
axes[1].grid(True, linestyle='--', linewidth=0.5)
axes[1].legend(loc='upper right', title='Recidivism')
axes[1].tick_params(axis='x', rotation=45)

# Create countplot for age category
label_by_age = sns.countplot(
    ax=axes[2],
    x="age_cat",
    hue="label_value",
    data=df_compas_aeq,
    palette=coolwarm_two_colors
)

# Add title and labels for age category
axes[2].set_title("Levels of recidivism by Age Category")
axes[2].set_xlabel("Age Category")
axes[2].set_ylabel("Count")
axes[2].grid(True, linestyle='--', linewidth=0.5)
axes[2].legend(loc='upper right', title='Recidivism')

# Adjust layout
plt.tight_layout()

# Display the plot
plt.show()



```

<br>

## Introducing the Aequitas-Library

After eyeballing our data set and noticing that there might be some fairness issues, we can now use the Aequitas library to calculate common metrics that indicate biases in subgroups. More specifically, we are using the library's Group() class that evaluates biases across all demographic subgroups in the dataset. Note here that the library requires the input data to have columns named "score" and "label_value". These columns are by default used to calculate the bias metrics.

In order to use Aequitas for your purposes, you should rename the columns that you want to check for potential biases to "score" and "label_value". Additionally, at least one column needs to include grouping information (in our example, several demographic variables). ID variables as entity_id are by default not treated as grouping variables.

The following code chunk calculates these metrices for all demographic subgroups using the get_crosstabs function, based on the risk score and the label_value, which indicates the recidivism.


```{python plot2}
#|code-fold: true

g = Group()
xtab, _ = g.get_crosstabs(df_compas_aeq)
xtab

```

<br>

Additionally, we can use list_absolute_metrics() for an improved overview grouped by the demographics and with rounded values for the metrics.

<br>

```{python plot3}
#|code-fold: true

absolute_metrics = g.list_absolute_metrics(xtab)
xtab[['attribute_name', 'attribute_value'] + absolute_metrics].round(2)

```

<br>

Next, we can use the information on the metrics that have been calculated by the previous chunk to plot the present biases. For that purpose, the `Plot()` class is used and stored in a variable. Afterwards, this variable can be used to plot the metrics of interest. The next code chunk exemplarily plots the **false positive rate** for all subgroups. In the context of our data, false positive cases are present when defendants are classified high risk although they did not recidivate. As we can see from the plot below, these cases are especially present amoung younger as well as among African- and Native Americans.

Additionally, the colors by default indicate how many respondents are included in the respective subgroup. The exact number can also be retrieved from the bar labels. Referring to the group sizes, you can see that the two races with they highest FPR are of significantly different size: While there are only 18 Native Americans included in our data, a total of nearly 3,700 African-American defendants are present.  


```{python plot4}
#|code-fold: true

aqp = Plot()
fpr = aqp.plot_group_metric(xtab, 'fpr')

```


<br>

For better readability, and when only interested in the rates rather then the absolute numbers, we can switch the axes and rotate the x-axis labels:

<br>

```{python plot5}
#|code-fold: true

xtab_df = xtab[['attribute_name', 'attribute_value'] + absolute_metrics].round(2).set_index(['attribute_name', 'attribute_value'])
xtab_df = xtab_df.reset_index()

# Create a figure for the plot
plt.figure(figsize=(9, 6))

# Create a bar plot for FPR
ax = sns.barplot(x='attribute_value', y='fpr', hue='attribute_name', data=xtab_df, palette='coolwarm', dodge=True)
ax.set_xticklabels(ax.get_xticklabels(), rotation=60, ha='right')


# Add title and labels
plt.title('False Positive Rate (FPR) by Attribute')
plt.xlabel('Attribute Value')
plt.ylabel('FPR')

# Rotate x-axis labels for better readability
plt.xticks(rotation=60)

# Show the plot
plt.show()

```






------------------------------------------------------------------------

# References

------------------------------------------------------------------------


::: {.callout-tip}
## References

- Regean, Mary. 2021. "Understanding bias and fairness in AI system". [URL](https://towardsdatascience.com/understanding-bias-and-fairness-in-aisystems-6f7fbfe267f3)

- Anaconda, 2021 State of Data Science Report. [URL](https://know.anaconda.com/rs/387-XNW-688/images/Anaconda-2021-SODS-Report-Final.pdf)

- Clark, Andrew. September 19, 2022. "Top bias metrics and how they work". Monitaur. [URL](https://www.monitaur.ai/blog-posts/top-bias-metricsand-how-they-work)

- Feldman et al. ‚ÄûCertifying and Removing Disparate Impact‚Äú. Proceedings of the 21th ACM SIGKDD International Conference on KnowledgeDiscovery and Data Mining, ACM, 2015, S. 259‚Äì68. DOI.org (Crossref), [URL](https://doi.org/10.1145/2783258.2783311).

- Towards datascience, "AI Fairness ‚Äî Explanation of Disparate Impact Remover". [URL](https://towardsdatascience.com/ai-fairness-explanation-of-disparate-impact-remover-ce0da59451f1)

- Lee, Nicol Turner, Paul Resnick, and Genie Barton. "Algorithmic bias detection and mitigation: Best practices and policies to reduce consumer harms." Brookings Institute: Washington, DC, USA 2 (2019)
:::

::: callout-note
Cite this page: Roa, J. (2023, April 16). *Understanding R Objects: Data Structures and Classes in R*. /. [URL](https://www.hertiecodingclub.com/learn/rstudio/rstudio101/)
:::


